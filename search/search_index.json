{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JavaScript Docs","text":"<p>Mis apuntes acerca del universo JS.</p>"},{"location":"#javascript","title":"JavaScript","text":""},{"location":"#typescript","title":"TypeScript","text":""},{"location":"#nodejs","title":"NodeJS","text":""},{"location":"#reactjs","title":"ReactJS","text":""},{"location":"#express","title":"Express","text":""},{"location":"Express/","title":"EXPRESS","text":"<p>Sitio oficial: https://expressjs.com</p> <p>Express es un framework que sirve para crear servidores. Se instala localmente v\u00eda NPM: <pre><code>npm install express --save\n</code></pre> La opcion <code>--save</code> obliga a actualizar el archivo JSON con la nueva dependencia.</p> <p>breves definiciones:</p> <p>CRUD</p> <p>CRUD son las operaciones basicas realizables con la informacion almacenada en base de datos. - Create - Read - Update - Delete</p> <p>API</p> <p>REST (Representational State Transfer) Estilo de arquitectura de software para sistemas hipermedia distribuidos.</p> <p>Importar</p> <p>Express se importa tipicamente como:</p> <p>const express = require('express')</p> <p>para definir el nombre del descriptor del server creado: </p> <pre><code>const &lt;descriptor&gt; = express();\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#crear-proyecto","title":"Crear proyecto","text":"<p>Crear proyecto:</p> <pre><code>npm init\n</code></pre> <p>Se abre el ayudante para hacer las configuraciones iniciales. La info se guarda en el archivo 'package.json'.</p> <pre><code>npm install express\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#importar","title":"importar","text":"<pre><code>const express = require('express');\nconst app = express();\n\n//importacion de datos del backend\n//en la vida real se usar\u00eda una base de datos\nconst {infoCursos} = require('./cursos.js');\n\nconsole.log(infoCursos);\nconsole.log(typeof(infoCursos));\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#apertura-de-puerto","title":"Apertura de puerto","text":"<pre><code>//lectura del puerto desde las variables de entorno\n// si no fue asignada se le da un valor fijo\nconst PUERTO = process.env.PORT || 3000;    \n\napp.listen(PUERTO, ()=&gt;{\n    console.log(`El servidor est\u00e1 escuchando en el puerto ${PUERTO}...`);\n});\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#estructura-de-datos","title":"estructura de datos","text":"<pre><code>let infoCursos = {\n    programacion: [\n        {\n            id: 1, \n            titulo: 'Aprende Python',\n            lenguaje: 'python',\n            vistas: 5000,\n            nivel: 'basico'\n        },\n        {\n            id: 2, \n            titulo: 'Python intermedio',\n            lenguaje: 'python',\n            vistas: 13201,\n            nivel: 'intermedio'\n        },\n        {\n            id: 3, \n            titulo: 'Aprende javaScript',\n            lenguaje: 'javascript',\n            vistas: 22651,\n            nivel: 'basico'\n        }\n    ],\n    matematicas: [\n\n        {\n            id: 1, \n            titulo: 'Aprende Calculo',\n            tema: 'calculo',\n            vistas: 2911,\n            nivel: 'basico'\n        },             \n        {\n            id: 2, \n            titulo: 'Aprende Algebra',\n            tema: 'algebra',\n            vistas: 3141,\n            nivel: 'intermedio'\n        } \n    ]\n}\n\nmodule.exports.infoCursos = infoCursos;\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#routing","title":"routing","text":"<pre><code>// Routing\n// ruta raiz\napp.get('/', (req, res) =&gt; {\n    res.send('Mi primer server en Express')    \n});\n\napp.get('/api/cursos', (req, res) =&gt; {\n    res.send(JSON.stringify(infoCursos))    \n});\n\napp.get('/api/cursos/programacion', (req, res) =&gt; {\n    res.send(JSON.stringify(infoCursos.programacion))    \n});\n\n\napp.get('/api/cursos/matematicas', (req, res) =&gt; {\n    res.send(JSON.stringify(infoCursos.matematicas))    \n});\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#parametros-de-ruta","title":"parametros de ruta","text":"<pre><code>// uso de parametros de ruta\n// el parametro se marca con los dos puntos (:)\napp.get('/api/cursos/programacion/:lenguaje', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const lenguaje = req.params.lenguaje ; \n    const resultados = infoCursos.programacion.filter(curso =&gt; curso.lenguaje === lenguaje)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${lenguaje}`);\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n\n// uso de parametro de ruta DOBLE\napp.get('/api/cursos/programacion/:lenguaje/:nivel', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const lenguaje = req.params.lenguaje; \n    const nivel = req.params.nivel;\n    const resultados = infoCursos.programacion.filter(curso =&gt; curso.lenguaje === lenguaje &amp;&amp; curso.nivel === nivel)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${lenguaje} de nivel ${nivel}`);\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n\n// uso de parametros de ruta\n// el parametro se marca con los dos puntos (:)\napp.get('/api/cursos/matematicas/:tema', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const tema = req.params.tema ; \n    const resultados = infoCursos.matematicas.filter(curso =&gt; curso.tema === tema)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${tema}`);\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#parametros-query","title":"parametros query","text":"<pre><code>http://localhost:3000/api/cursos/programacion/python?ordenar=vistas\n</code></pre> <pre><code>// uso de parametros de ruta\n// el parametro se marca con los dos puntos (:)\nrouterProgramacion.get('/:lenguaje', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const lenguaje = req.params.lenguaje ; \n    const resultados = infoCursos.programacion.filter(curso =&gt; curso.lenguaje === lenguaje)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${lenguaje}`);\n    }\n\n    // parametro de query\n    if (req.query.ordenar === 'vistas'){\n        return res.send(JSON.stringify(resultados.sort((a, b) =&gt; b.vistas - a.vistas)));\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#routers-en-express","title":"routers en express","text":"<p>Creacion: <pre><code>//Routers\n// los routers permiten asignar una ruta relativa \nconst routerProgramacion = express.Router() ;\napp.use('/api/cursos/programacion', routerProgramacion);\n\nconst routerMatematicas = express.Router() ;\napp.use('/api/cursos/matematicas', routerMatematicas);\n</code></pre></p> <p>Uso: <pre><code>// app.get('/api/cursos/programacion', (req, res) =&gt; {\nrouterProgramacion.get('/', (req, res) =&gt; {\n    res.send(JSON.stringify(infoCursos.programacion))    \n});\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#dividir-en-archivos","title":"dividir en archivos","text":"<p>El programa se puede repartir en varios archivos para facilitar l ordenamiento.</p> <p>En el ejemplo previo: rutina principal:  <pre><code>const express = require('express');\nconst app = express();\n\n//importacion de datos del backend\n//en la vida real se usar\u00eda una base de datos\nconst {infoCursos} = require('./datos/cursos.js');\n\n\n//Routers\n// los routers permiten asignar una ruta relativa \nconst routerProgramacion = require('./routers/programacion.js')\napp.use('/api/cursos/programacion', routerProgramacion);\n\nconst routerMatematicas = require('./routers/matematicas.js')\napp.use('/api/cursos/matematicas', routerMatematicas);\n\n//ROUTING\napp.get('/', (req, res) =&gt; {\n    res.send('Mi primer server en Express')    \n});\n\n\napp.get('/api/cursos', (req, res) =&gt; {\n    res.send(JSON.stringify(infoCursos))    \n});\n\n\n//lectura del puerto desde las variables de entorno\n// si no fue asignada se le da un valor fijo\nconst PUERTO = process.env.PORT || 3000;    \n\napp.listen(PUERTO, ()=&gt;{\n    console.log(`El servidor est\u00e1 escuchando en el puerto ${PUERTO}...`);\n});\n</code></pre> rutina para la secci\u00f3n 'matematicas': <pre><code>const express = require('express');\n\nconst {matematicas} = require('../datos/cursos').infoCursos;\n\nconst routerMatematicas = express.Router() ;\n\nrouterMatematicas.get('/', (req, res) =&gt; {\n    res.send(JSON.stringify(matematicas))    \n});\n\n// uso de parametros de ruta\n// el parametro se marca con los dos puntos (:)\nrouterMatematicas.get('/:tema', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const tema = req.params.tema ; \n    const resultados = matematicas.filter(curso =&gt; curso.tema === tema)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${tema}`);\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n\nmodule.exports = routerMatematicas;\n</code></pre> rutina para la secci\u00f3n 'programacion': <pre><code>const express = require('express');\n\nconst {programacion} = require('../datos/cursos').infoCursos;\n\n\nconst routerProgramacion = express.Router() ;\n\nrouterProgramacion.get('/', (req, res) =&gt; {\n    res.send(JSON.stringify(programacion))    \n});\n\n// uso de parametros de ruta\n// el parametro se marca con los dos puntos (:)\nrouterProgramacion.get('/:lenguaje', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const lenguaje = req.params.lenguaje ; \n    const resultados = programacion.filter(curso =&gt; curso.lenguaje === lenguaje)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${lenguaje}`);\n    }\n\n    // parametro de query\n    if (req.query.ordenar === 'vistas'){\n        return res.send(JSON.stringify(resultados.sort((a, b) =&gt; b.vistas - a.vistas)));\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n\n// uso de parametro de ruta DOBLE\nrouterProgramacion.get('/:lenguaje/:nivel', (req, res) =&gt; {\n    //extraemos el parametro URL de la request\n    const lenguaje = req.params.lenguaje; \n    const nivel = req.params.nivel;\n    const resultados = programacion.filter(curso =&gt; curso.lenguaje === lenguaje &amp;&amp; curso.nivel === nivel)\n\n    if (resultados.length === 0){\n        return res.status(404).send(`No se encontraron cursos de ${lenguaje} de nivel ${nivel}`);\n    }\n\n    res.send(JSON.stringify(resultados))    \n});\n\nmodule.exports = routerProgramacion;\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#miiddleware","title":"MIIDDLEWARE","text":"<p>Las funciones midleware se ejecutan: - Despues de recibir una solicitud - Antes de enviar una respuesta Tienen acceso al objeto de la solicitud, al objeto de la respuesta y a la funcion next(), la cual se llama para ejecutar el proximo middleware</p> <p>Ejemplo: <pre><code>// MIDDLEWARE\n// habilitar  procesamiento de JSON\nrouterProgramacion.use(express.json());\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#post-put-patch-delete","title":"post put patch delete","text":"<p>Hacer una request (envio) tipo POST desde archivo HTML. Extension util: 'REST Client'</p> <p>archivo 'index.http'</p> <pre><code>POST http://localhost:3000/api/cursos/programacion HTTP/1.1\nContent-Type: application/json\n\n{\n    \"id\":4,\n    \"titulo\": \"Aprende Node.js\",\n    \"lenguaje\": \"javascript\",\n    \"vistas\": 45982,\n    \"nivel\": \"basico\"\n}\n</code></pre> <p>Las rutinas de procemiento usadas son:</p> <pre><code>// POST (agregado de datos)\nrouterProgramacion.post('/', (req, res) =&gt; {\n    // lectura del contenido enviado al sever\n    let cursoNuevo = req.body;\n    // guardado temporal en el objeto de datos\n    // (NO se hizo validaci\u00f3n de datos alguna)\n    programacion.push(cursoNuevo);      \n    res.send(JSON.stringify(programacion))\n});\n</code></pre> <pre><code>// PUT (modificacion de datos)\n// la data a recibirse debe estar COMPLETA\n// la data nueva REEMPLAZA por completo a la anterior\nrouterProgramacion.put('/:id', (req,res) =&gt; {\n    const cursoActualizado = req.body;\n    const id = req.params.id;\n\n    const indice = programacion.findIndex(curso =&gt; curso.id == id); //se compara 'int' con 'string'\n\n    // indice no encontrado --&gt; -1\n    if (indice &gt;= 0){\n        programacion[indice] = cursoActualizado;\n\n    }\n    res.send(JSON.stringify(programacion));\n})\n</code></pre> <pre><code>// PATCH (parche)\nrouterProgramacion.patch('/:id', (req,res) =&gt; {\n    const infoActualizada = req.body;\n    const id = req.params.id;\n\n    const indice = programacion.findIndex(curso =&gt; curso.id == id); //se compara 'int' con 'string'\n\n    // indice no encontrado -&gt; -1\n    if (indice &gt;= 0){\n        const cursoAModificar = programacion[indice];       // copia del elemento\n        Object.assign(cursoAModificar, infoActualizada);    // \n    }\n    res.send(JSON.stringify(programacion));\n})\n</code></pre> <pre><code>// DELETE \nrouterProgramacion.delete('/:id', (req,res) =&gt; {\n    const id = req.params.id;\n\n    const indice = programacion.findIndex(curso =&gt; curso.id == id); //se compara 'int' con 'string'\n\n    // indice no encontrado -&gt; -1\n    if (indice &gt;= 0){\n        programacion.splice(indice, 1); // elimina UN elemento, indicado por 'indice'\n    }\n    res.send(JSON.stringify(programacion));\n})\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"Express/#importante","title":"importante","text":"<p>Por defecto la funcion send() convierte la data a JSON , por ello llamar <pre><code>res.send(JSON.stringify(programacion)); //redundante\nres.send(programacion);\n</code></pre> Otra funcion muy popular para enviar la data asegurando la conversion a JSON es la funcion json(): <pre><code>res.json(programacion);\n</code></pre></p> <p>Es posible enviar respuestas vac\u00edas con el metodo .end(): <pre><code>res.status(404).end();\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"React/","title":"ReactJS","text":"<p>https://react.dev/</p> <p>fuente: https://www.youtube.com/watch?v=ladwC6Lrs-M&amp;t=696s</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#vitejs","title":"ViteJS","text":"<p>P\u00e1gina oficial: https://vitejs.dev/guide/</p> <p>Vite es una herramienta que facilita crear proyectos de JavaScript y derivados. Adem\u00e1s permite la compilaci\u00f3n del proyecto.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#crear-proyecto-con-vite","title":"Crear proyecto con Vite","text":"<p>Para crear un nuevo proyecto con Vite desde NodeJS ejecutar en la terminal: <pre><code>npm create vite@latest\n</code></pre> 1. La consola pedir\u00e1 un nombre de proyecto y crear\u00e1 una carpeta con igual nombre.  2. Se desplegar\u00e1 una lista para elegir un framework disponible para el proyecto (React, Vue, Svelte, etc) 3. Se desplegar\u00e1 una nueva lista desplegable para elegir usar entre JavaScript y TypeScript, con la opcion adicional de usar el traspilador SWC</p> <p>Vite crea la carpeta del proyecto con un archivo .gitignore prearmado para no \"subir\" archivos superfluos al control de versiones y tambi\u00e9n crea un archivo package.json con las dependiencias del proyecto. </p> <p>Para construir el proyecto prearmado hay que entrar al directorio del proyecto: <pre><code>cd &lt;directorio_proyecto&gt;\n</code></pre> E instalar todas las dependencias requeridas localmente: <pre><code>npm install\n</code></pre></p> <p>Si hay problemas persistentes con la instalacion escribir: <pre><code>npm cache clean --force\nnpm install\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#modo-desarrollo-dev","title":"Modo Desarrollo (dev)","text":"<p>Para poner a prueba el proyecto, desde su directorio se ejecuta el comando:  <pre><code>npm run dev\n</code></pre> VITE act\u00faa como servidor local que admite cambios del proyecto \"en vivo\", actualiz\u00e1ndose con cada guardado de los archivos de proyecto. En consola se muestra la informaci\u00f3n de IP, puerto usado y opciones de ayuda del proyecto.</p> <p>HINT: para interrumpir el modo de desarrollo escribir 'Ctrl'+'C'.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#modo-produccion-build","title":"Modo Producci\u00f3n (build)","text":"<p>Para publicar el proyecto primero hay que construirlo (build). Para ello se ejecuta el comando: <pre><code>npm run build\n</code></pre> Como resultado se crear\u00e1 dentro de la subcarpeta dist del proyecto los archivos definitivos para la puesta en produccion:  - un \u00fanico archivo HTML de maquetado; - un \u00fanico archivo CSS para los estilos; - un \u00fanico archivo de JavaScript reuniendo todas las rutinas del proyecto. </p> <p>Un ejemplo real de un proyecto construido:</p> Archivo Tama\u00f1o dist/index.html 0.46 kB dist/assets/index-7ea528fc.css 0.15 kB dist/assets/index-75012726.js 143.87 kB <p>Estos archivos se copian al servidor final para que \u00e9ste los proporcione al cliente.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#react","title":"React","text":"<p>Pagina comunidad: https://react.dev</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#estructura-y-tipos-de-archivo","title":"Estructura y tipos de archivo","text":"<p>Los archivos del proyecto se reparten m\u00e1s o menos as\u00ed:</p> <pre><code>&lt;proyecto&gt;\n    |--src\n        |--main.jsx\n        |--styles.css\n        |-- (...)\n\n    |--index.html\n    |--.gitignore\n    |--package.json\n    |-- (...)\n</code></pre> <p>El archivo 'index.html' es el archivo auxiliar donde se inyectar\u00e1 el c\u00f3digo del proyecto.</p> <p>El c\u00f3digo fuente del proyecto de React se guarda por defecto dentro de la carpeta 'src'.</p> <p>JSX es la extensi\u00f3n de los archivos de ReactJS: el archivo principal, los componentes a crear, etc. Los componentes usan un sistema de etiquetas similar al de HTML mezclado con funciones y rutinas al estilo JavaScript.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#archivo-mainjsx","title":"Archivo main.jsx","text":"<p>main.jsx es el archivo principal del proyecto. Dentro de \u00e9l se pueden inportar otros archivos del proyecto, por ejemplo la hoja de estilos principal: <pre><code>import './styles.css'\n</code></pre> La importaci\u00f3n de componentes creados en archivos JSX se hace as\u00ed: <pre><code>//archivo 'MiComponente.jsx'\nimport { MiComponente} from \"./MiComponente\"\n</code></pre></p> <p>React renderiza  los componentes invocados para inyectarlos al DOM del archivo  <pre><code>ReactDOM.createRoot(document.getElementById('root')).render(\n    &lt;React.StrictMode&gt;\n        // componentes en etiquetas, habitualmente autoconclusivas\n        {...}\n        { &lt;MiComponente /&gt; }\n        {...}\n    &lt;/React.StrictMode&gt;\n)\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#componentes","title":"Componentes","text":"<p>Los componentes de ReactJS se escriben en archivos  JSX.  Cada hoja de componentes  arranca con sus propias importaciones de componentes: <pre><code>    import React from 'react'\n</code></pre> Cada componente puede tener su propia hoja de estilos: <pre><code>import './PrimerComponente.css'\n</code></pre> Los componentes se exportan mediante funciones flecha como la mostrada a continuacion: <pre><code>export const MiComponente = () =&gt; {\n    return (\n        &lt;div&gt;MiComponente&lt;/div&gt;\n    )\n}\n</code></pre></p> <p>En este ejemplo la funci\u00f3n return() devuelve una \u00fanica etiqueta de tipo HTML. </p> <p>Los componentes se nombran con convencion PascalCase : arrancan con mayusculas en cada palabra de su nombre.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#fragment","title":"Fragment","text":"<p>ReactJS s\u00f3lo permite devolver un \u00fanico elemento padre, es decir no permite enviar varias etiquetas con igual jerarqu\u00eda. Si se requiere enviar varios elementos juntos hay que englobarlos con un par de etiquetas vac\u00edas ( &lt;&gt; y **): <pre><code>&lt;&gt;  \n    &lt;h1&gt; Titulo &lt;/h1&gt; \n    &lt;p&gt; Descripcion &lt;p&gt; \n&lt;/&gt;\n</code></pre> Antiguamente se usaban etiquetas fragment pero se abandonaron a favor de las etiquetas vac\u00edas.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#variables","title":"Variables","text":"<p>para poder entregar valores de variables y de funciones a \u00e9stas se les debe rodear con llaves ({}).</p> <p>Ejemplo: multiples etiquetas de retorno y lectura de una  variable. <pre><code>    const fecha = new Date() //variable 'objeto' con fecha actual\n\n    export const PrimerComponente = () =&gt; {\n        return (\n            &lt;&gt;  \n                &lt;h1&gt; Fecha de hoy &lt;/h1&gt; \n                &lt;p&gt;{ JSON.stringify( fecha ) }&lt;p&gt; \n            &lt;/&gt;\n        )\n    }\n</code></pre></p> <p>Importante: ReactJS NO permite que los componentes env\u00eden objetos; sin embargo esta limitaci\u00f3n se puede supera convirtiendo a cadena de caracteres:  <pre><code>JSON.stringify( &lt;objeto&gt; )\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#props","title":"Props","text":"<p>Las propiedades (props) son un mecanismo para pasar informacion de un objeto padre a un objeto hijo.</p> <p>Las propiedades normalmente se pasan de forma desestructurada, esto es con los argumentos de las funciones flecha entre llaves. Ejemplo:  <pre><code>export const Propiedades = ({texto, numero}) =&gt; {\n    return (\n        &lt;&gt;  \n            &lt;h2&gt;{ texto }&lt;/h2&gt;\n            &lt;h2&gt;{ numero }&lt;/h2&gt;   \n        &lt;/&gt;\n    )\n}\n</code></pre></p> <p>Al componente se le pasan las propiedades por asignaci\u00f3n expl\u00edcita dentro de su etiqueta. Para pasar texto se usan comillas simples o dobles, en tanto que para pasar n\u00fameros se pasan entre llaves: <pre><code>{ &lt;Propiedades texto=\"testeando props\"  numero={127} /&gt;}\n</code></pre> Para a\u00f1adir tipado, obligatoriedad y valor por defecto a las propiedades en JavaScript se puede usar el modulo PropTypes</p> <p>Importacion: <pre><code>import PropTypes from 'prop-types'\n</code></pre> Tipo y obligatoriedad: <pre><code>Propiedades.propTypes= {\n    texto  : PropTypes.string.isRequired,\n    numero : PropTypes.number.isRequired \n}\n</code></pre> Valor por defecto: <pre><code>Propiedades.defaultProps={\n    texto: 'Curso de React',\n    numero: 8  \n}\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#eventos-y-handlers-manejadores-de-eventos","title":"Eventos y Handlers (manejadores de eventos)","text":"<p>Los eventos son \"mecanismos por los cuales los componentes pueden reaccionar a la interaccion del usuario\".</p> <p>Los nombres de eventos de React comienzan siempre con 'on'. Por ejemplo el click izquierdo es 'onClick' Todos los eventos se mencionan en la documentacion Legacy: https://es.legacy.reactjs.org/docs/events.html (La nueva documentacion omite muchos tipos)</p> <p>Los eventos usados se especifican dentro de la definicion de los componentes, asignando funciones llamadas manejadores o handlers a los eventos de inter\u00e9s dentro de las etiquetas. </p> <p>Para manejadores con \u00fanico argumento alcanza con llamar al handler por su nombre: <pre><code>const manejarClick = () =&gt; {\n    console.log(value)\n}\n\nconst Boton = () =&gt; {\n    return(\n        &lt;button onClick = { manejarClick } &gt; \n            Soy un bot\u00f3n\n        &lt;/button&gt; \n    )\n}\n</code></pre> en tanto que para handlers con m\u00e1s de un argumento se usan funciones flecha para permitir indicar los argumentos: <pre><code>function manejarClick(event, args) {\n    console.log(event)\n    console.log(args)\n}\n\nconst Boton = () =&gt; {\n    return(\n        &lt;button onClick = { (event) =&gt; manejarClick(event, arg) } &gt;   \n            Soy un bot\u00f3n\n        &lt;/button&gt;\n    )\n}\n</code></pre> Los handlers pueden definirse tanto dentro como fuera del componente; sin embargo esto afecta a la visibilidad de las variables.</p> <p>Importante: para que los cambios de valor de las variables puedan verse en la p\u00e1gina o aplicaci\u00f3n hay que actualizar los estados (ver m\u00e1s adelante).</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#hooks","title":"Hooks","text":"<p>Desde la version 16.8 de React se cambi\u00f3 la metodolog\u00eda de creacion de componentes de 'class base components' al uso de 'functional components' mediante hooks Los hooks permiten usar las funciones especiales de React dentro de componentes de tipo funcion.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#estado-state","title":"Estado (State)","text":"<p>Es un objeto mutable que contiene datos y representa la informacion a renderizar para ser vista por el usuario. </p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#usestate","title":"useState","text":"<p>'useState' es un hook que permite actualizar estados de los componentes en el DOM.</p> <p>Importacion del hook: <pre><code>import {useState} from 'react'\n</code></pre> Creacion de una variable - estado y su m\u00e9todo <pre><code>const [estado setEstado] = useState(valor_inicial)\n</code></pre> De aqu\u00ed en m\u00e1s el handler deber\u00e1 llamar al m\u00e9todo definido para alterar al estado: <pre><code>const handleClick = () =&gt; {\n    setEstado( &lt;operacion&gt; )\n}\n</code></pre> donde la 'operacion' puede ser aritmetica o l\u00f3gica.</p> <p>Ejemplo de uso: un bot\u00f3n que cuenta clicks del mouse desde cero</p> <p><pre><code>import {useState} from 'react'\n\nexport const ContadorApp = ({value}) =&gt; {\n    const [contador, setContador] = useState( value )\n    const handleClick = () =&gt; {\n        setContador( contador + 1 )\n    }\n    &lt;button onClick = { handleClick } &gt;   \n        Soy un bot\u00f3n\n    &lt;/button&gt;\n\n    return (\n        &lt;&gt;\n        &lt;h1&gt;Contador:&lt;/h1&gt;\n        &lt;p&gt;{contador}&lt;/p&gt;\n        &lt;button onClick = { handleClick } &gt;   \n            Soy un bot\u00f3n\n        &lt;/button&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> En el ejemplo, tanto el handler como el elemento se definen dentro del componente para permitir el traspaso de la variable 'contador'.</p> <p>El bot\u00f3n se crea desde el ReactDOM en el archivo 'main.jsx' y se le asigna un valor inicial: <pre><code>&lt;ContadorApp   value={valor_inicial} /&gt;\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#classname","title":"className","text":"<p>Las etiquetas de React se clasifican mediante la propiedad 'className' en vez de 'class'. Ejemplo: nombre de clase 'rojito' para una lista  <pre><code>    // Elemento 'Item'\n    const Item = ({nombre, visto}) =&gt; {\n        return (\n            &lt;li className=\"rojito\"&gt; {nombre} \n                {visto ? '\u2705' : '\u26d4' }  \n                {/* {visto &amp;&amp; '\u2705' }  */}\n            &lt;/li&gt;\n        )\n    }\n</code></pre> En el ejemplo se lee una variable de texto llamada 'nombre'  y se le concatena un icono elegido mediante un condicional ternario en base al valor l\u00f3gico de la variable 'visto' HINT: los iconos en VSCode y derivados se pueden desplegar con el atajo 'Windows' + '.' </p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#map","title":"Map","text":"<p>El m\u00e9todo 'map' lee un array y permite descomponerlo en m\u00faltiples variables, o asignarlo a un tipo de datos distinto</p> <p>Ejemplo: conversion del array de objetos al 'arreglo'  al elemento 'Item' del ejemplo previo mediante un elemento auxiliar llamado arre  <pre><code>{arreglo.map(arre =&gt; &lt;Item key={arre.id} nombre={arre.nombre} visto={arre.visto}&gt;&lt;/Item&gt;)}\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#atomic-design","title":"Atomic Design","text":"<p>Es un enfoque de dise\u00f1o que busca crear elementos lo m\u00e1s peque\u00f1os y reutilizables que se pueda. Con los elementos m\u00e1s peque\u00f1os se crean los elementos m\u00e1s grandes.</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#properties","title":"Properties","text":"<p>Las properties en JSX son el equivalente a los atributos de HTML</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#formularios","title":"Formularios","text":"","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#useeffect","title":"useEffect","text":"<p>useEffect es un hook que ejecuta una misma funcion s\u00f3lo una vez hasta que haya un cambio de valores de entrada,en tal caso se ejecuta de nuevo automaticamente. </p> <p>Ejemplo de uso: un bot\u00f3n que al clickear despliega una lista de usuarios en formato JSON.</p> <p>Importaci\u00f3n del hook: <pre><code>import { useEffect } from \"react\"   \n</code></pre> Definici\u00f3n de la funci\u00f3n de busqueda  de usuarios: <pre><code>const fetchUsers = async () =&gt;{\n    try{\n        // sitio con datos JSON prearmados para tests:\n        const response = await fetch( 'https://jsonplaceholder.typicode.com/users' )\n        const data = await response.json()\n        console.log(data)\n        setUsers(data)\n    }catch(error){\n        console.error(error)\n    }\n}\n</code></pre> Asociacion del hook a una funci\u00f3n: <pre><code>useEffect( () =&gt;{\n    fetchUsers()\n}, []  )\n</code></pre> Asociacion del manejador a un bot\u00f3n: <pre><code>&lt;button onClick={handleFetch}&gt; Aqui se llama a la API&lt;/button&gt;\n</code></pre></p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"React/#custom-hook","title":"Custom Hook","text":"<p>Los 'custom Hooks' son funciones personalizadas que se usan para asistir a los componentes y minimiza su l\u00f3gica. Se trata de pasar las rutinas y funciones que usan los componentes a archivos JS mientras que en los archivos JSX s\u00f3lo quedan las etiquetas de los componentes y los llamados a las funciones. Los archivos de las custom hooks suelen guardarse dentro de una subcarpeta de \"components\" llamada \"hooks\".</p>","tags":["JavaScript","ReactJS","NPM","ViteJS"]},{"location":"tags/","title":"Etiquetas","text":"<p>Todas las etiquetas usadas en el proyecto aparecen aqu\u00ed.</p>"},{"location":"tags/#tag:css","title":"CSS","text":"<ul> <li>            Document Object Model (DOM)          </li> </ul>"},{"location":"tags/#tag:html5","title":"HTML5","text":"<ul> <li>            Document Object Model (DOM)          </li> </ul>"},{"location":"tags/#tag:javascript","title":"JavaScript","text":"<ul> <li>            Asincron\u00eda          </li> <li>            Comenzando          </li> <li>            Document Object Model (DOM)          </li> <li>            Ejecutar          </li> <li>            Eventos y Promesas          </li> <li>            Express          </li> <li>            JSON          </li> <li>            Modelo Cliente - Servidor          </li> <li>            Modulos          </li> <li>            NPM          </li> <li>            NodeJS - Introducci\u00f3n          </li> <li>            ReactJS          </li> <li>            TypeScript - Introducci\u00f3n          </li> </ul>"},{"location":"tags/#tag:npm","title":"NPM","text":"<ul> <li>            Asincron\u00eda          </li> <li>            Eventos y Promesas          </li> <li>            Express          </li> <li>            JSON          </li> <li>            Modelo Cliente - Servidor          </li> <li>            Modulos          </li> <li>            NPM          </li> <li>            NodeJS - Introducci\u00f3n          </li> <li>            ReactJS          </li> <li>            TS-Node          </li> <li>            TypeScript - Introducci\u00f3n          </li> </ul>"},{"location":"tags/#tag:nodejs","title":"NodeJS","text":"<ul> <li>            Asincron\u00eda          </li> <li>            Eventos y Promesas          </li> <li>            Express          </li> <li>            JSON          </li> <li>            Modelo Cliente - Servidor          </li> <li>            Modulos          </li> <li>            NPM          </li> <li>            NodeJS - Introducci\u00f3n          </li> <li>            TS-Node          </li> <li>            TypeScript - Introducci\u00f3n          </li> </ul>"},{"location":"tags/#tag:pnpm","title":"PNPM","text":"<ul> <li>            Asincron\u00eda          </li> <li>            Eventos y Promesas          </li> <li>            Express          </li> <li>            JSON          </li> <li>            Modelo Cliente - Servidor          </li> <li>            Modulos          </li> <li>            NPM          </li> <li>            NodeJS - Introducci\u00f3n          </li> <li>            TypeScript - Introducci\u00f3n          </li> </ul>"},{"location":"tags/#tag:reactjs","title":"ReactJS","text":"<ul> <li>            ReactJS          </li> <li>            TypeScript - Introducci\u00f3n          </li> </ul>"},{"location":"tags/#tag:tsnode","title":"TSNode","text":"<ul> <li>            Ejecutar          </li> <li>            TS-Node          </li> <li>            TypeScript - Introducci\u00f3n          </li> </ul>"},{"location":"tags/#tag:typescript","title":"TypeScript","text":"<ul> <li>            Clases          </li> <li>            Datos compuestos          </li> <li>            Datos primitivos          </li> <li>            Ejecutar          </li> <li>            Funciones          </li> <li>            Interfases          </li> <li>            TS-Node          </li> <li>            Tipado          </li> <li>            Tipos          </li> </ul>"},{"location":"tags/#tag:vitejs","title":"ViteJS","text":"<ul> <li>            ReactJS          </li> </ul>"},{"location":"js/DOM/","title":"Document Object Model (DOM)","text":"","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#dom-document-object-model","title":"DOM (Document Object Model)","text":"<p>Es un modelo que permite manipular los componentes del documento HTML como objetos. Las etiquetas HTML anidadas constituyen el arbol DOM.</p> <pre><code>document.body\ndocument.head\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#metodos-tradicionales","title":"Metodos tradicionales","text":"<p>Para buscar elementos hay m\u00e9todos como:</p> <pre><code>document.getElementByID(&lt;identificador&gt;)\ndocument.getElementByClassName(&lt;identificador&gt;)\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#metodos-modernos","title":"M\u00e9todos modernos","text":"<p><code>QuerySelector()</code> devuelve el primer elemento encontrado en tanto que <code>querySelectorAll()</code> los devuelve a todos.</p> <pre><code>document.querySelector(&lt;elemento&gt;)\ndocument.querySelectorAll(&lt;elemento&gt;)\n</code></pre> <p>Ejemplo: para insertar un saludo en negrita dentro de un contenedor con ID 'app':</p> <pre><code>const app = document.querySelector('#app');\napp.innerHTML = \"&lt;strong&gt; Hola a todos &lt;/strong&gt;\";\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#crear-elementos","title":"Crear elementos","text":"<p>Est\u00e1 el m\u00e9todo <code>createElement()</code></p> <pre><code>const div = document.createElement('div');\ndiv.innerHTML = \"&lt;strong&gt; Hola a todos &lt;/strong&gt;\";\n</code></pre> <p>Referencia:</p> <pre><code>const div2 = div;\n</code></pre> <p>Clonacion superficial:</p> <p><pre><code>const div2 = div.cloneNode();\ndiv2.textContent = \"&lt;strong&gt; Adios a todos &lt;/strong&gt;\";\n</code></pre> Clonacion profunda:</p> <pre><code>const div2 = div.cloneNode(deep); //(o true??)\ndiv2.textContent = \"&lt;strong&gt; Adios a todos &lt;/strong&gt;\";\n</code></pre> <p>Dar valor a atributos:</p> <pre><code>elemento.id = \"hola\";\n</code></pre> <p>Crear atributos con valor:</p> <pre><code>elemento.setAtribute(\"id\",\"hola\");\n</code></pre> <p>M\u00e9todos para conocer atributos:</p> <pre><code>elemento.getAttributeNames()\nelemento.hasAttribute(&lt;nombre&gt;)\nelemento.hasAttributes()\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#fragmentos","title":"Fragmentos","text":"<p>Acceder a los fragmentos es m\u00e1s econ\u00f3mico que acceder al DOM directamente en t\u00e9rminos computacionales.</p> <pre><code>const fragmento = createDocumentFragment();\n    for (let i=0; i&lt;1000;i++){\n        const div = document.createElement(\"div\");\n        div.textContent = 'item n\u00famero $(i)';\n        fragmento.appendChild(div); //a\u00f1adido a la variable 'fragmento'\n    }\n\ndocument.body.appendChild(fragmento);    //subida al HTML\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#insertar-etiquetas","title":"Insertar etiquetas","text":"<p>Est\u00e1ndar:</p> <ul> <li><code>nodename</code></li> <li><code>textContent</code></li> <li><code>innerHTML</code></li> <li><code>outerHTML</code></li> </ul> <p>Exclusivos de Internet Explorer (evitar como a la peste):</p> <ul> <li><code>innerText</code></li> <li><code>outerText</code></li> </ul> <p><code>nodeName</code> nos devuelve el nombre del conjunto en mayusculas.</p> <p><code>textContent</code> permite leer y excribir por asignacion el texto de un elemento:</p> <pre><code>const div = document.querySelector(\"div\");\ndiv.textContent = \"Hola a todos\"; //asignacion\ndiv.textContent;  //lectura\n</code></pre> <p><code>innerHTML</code> permite leer y escribir interpretando y renderizando c\u00f3digo HTML:</p> <pre><code>const div = document.querySelector(\"div\");\ndiv.innerHTML = \"&lt;strong&gt;Importante&lt;/strong&gt;\"; //asignacion\ndiv.innerHTML;  //lee \"&lt;strong&gt;Importante&lt;/strong&gt;\"\ndiv.textContent;  //lee \"Importante\"\n</code></pre> <p><code>outerHTML</code> es como <code>innerHTML</code> pero incluye la informaci\u00f3n del elemento mismo. Esto permite reemplazar elementos:</p> <pre><code>const data = document.querySelector(\".data\");\ndata.innerHTML = \"&lt;h1&gt;Tema 1&lt;/h1&gt;\";\n\ndata.textContent;   // \"Tema 1\"\ndata.innerHTML;     // \"&lt;h1&gt;Tema 1&lt;/h1&gt;\"\ndata.outerHTML;     // \"&lt;div class=\"data\"&gt;&lt;h1&gt;Tema 1&lt;/h1&gt;&lt;/div&gt;\"\n</code></pre>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#insertar-elementos-al-dom","title":"Insertar Elementos al DOM","text":"<p><code>appendChild()</code> a\u00f1ade un elemento al final del <code>body</code>, justo antes de cerrarlo.</p> <pre><code>//creacion de un elemento imagen\nconst img =document.createElement(\"img\");\nimg.src = \"&lt;URL_imagen&gt;\";\nimg.alt = \"&lt;descripcion_imagen&gt;\"\n//a\u00f1adido del elemento al body del HTML\ndocument.body.appendChild(img);\n</code></pre> <p><code>insertAdjacent*()</code> es una familia de metodos para insertar elemetos de distintos tipos y en distintas ubicaciones:</p> <ul> <li><code>insertAdjacentElement()</code> --&gt; Objeto Element.</li> <li><code>insertAdjacentHTML()</code> --&gt; C\u00f3digo HTML.</li> <li><code>insertAdjacentText()</code> --&gt; NODE con texto.</li> </ul> <p>El segundo par\u00e1metro de estos m\u00e9todos es nombre (descriptor)del elemento a insertar y el primer par\u00e1metro es la ubicaci\u00f3n relativa respecto a las etiquetas del elemento modificado. Opciones:</p> <ul> <li><code>beforebegin</code>: Antes de la etiqueta HTML de apertura. (afuera del elemento)</li> <li><code>afterbeguin</code>: Despu\u00e9s de la etiqueta HTML de apertura. (adentro del elemento)</li> <li><code>beforeend</code>: Antes de la etiqueta HTML de cierre. (adentro del elemento)</li> <li><code>afterend</code>: Despu\u00e9s de la etiqueta HTML de cierre. (afuera del elemento)</li> </ul> <p>Uso: <pre><code>&lt;elemento_modificado&gt;.insertAdjacentElement('&lt;posicion&gt;',&lt;elemento_insertado&gt;)\n</code></pre></p>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#eliminar-elementos-del-dom","title":"Eliminar elementos del DOM","text":"<p>Los elementos del DOM se pueden \"eliminar\" (en realidad se desconectan del mismo pero seguir\u00e1n existiendo). M\u00e9todos habituales:</p> <ul> <li><code>remove()</code>: elimina el nodo padre. Uso:   <pre><code>&lt;elemento_padre&gt;.remove();\n</code></pre></li> <li><code>removeChild()</code>: elimina un nodo hijo elegido.   <pre><code>&lt;elemento_padre&gt;.removeChild(&lt;nodo&gt;)\n</code></pre></li> <li><code>replaceChild()</code>: reemplaza un elemento hijo por otro nuevo.   <pre><code>&lt;elemento_padre&gt;.replaceChild(&lt;nuevo_hijo&gt;,&lt;viejo_hijo&gt;)\n</code></pre></li> </ul>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#api-classlist-manipulacion-de-clases-css","title":"API ClassList - Manipulaci\u00f3n de clases CSS","text":"<p>Hay dos propiedades de JS para acceder y modificar las clases de un elemento HTML:</p> <ul> <li><code>className</code> : acceso simult\u00e1neo a todas las clases asignadas al elemento, que se guardan juntas. Poco pr\u00e1ctico para casos de clases m\u00faltiples.</li> <li><code>classList</code> : Objeto especial que permite manejar todas las clases CSS por separado, con metodos y propiedades dedicados. </li> </ul> <p>El objeto <code>classList</code> devuelve un DOMTokenList (algo muy parecido a un array) con la lista completa de clases guardadas y posee m\u00e9todos para trabajar con ellas:</p> <ul> <li><code>length</code>: contea cuantas clases hay</li> <li><code>item(n)</code>: devuelve el elemento n-esimo. Si no existe da NULL.</li> <li><code>add(clase1, clase2, ...)</code>: a\u00f1ade las clases indicadas.</li> <li><code>remove(clase1, clase2, ...)</code>: elimina las clases indicadas.</li> <li><code>contains(clase)</code>: verifica si la clase indicada existe.</li> <li><code>toggle(clase)</code>: alterna el estado de clase: si existe la borra, sino la crea.</li> <li><code>toggle(clase, condicion)</code>: alterna el estado de clase s\u00f3lo si se cumple la condici\u00f3n.</li> <li><code>replace(old, new)</code>: reemplaza una clase por otra.</li> </ul> <p>Ejemplo de uso: reemplazar una clase \"claro\" por una \"oscuro\" para cambiar de estilo CSS de una p\u00e1gina. <pre><code>const div = document.querySelector(\"#pagina\");\ndiv.classList.replace(\"claro\",\"oscuro\")\n</code></pre></p>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/DOM/#referencias","title":"Referencias","text":"<p>ManzDev - LenguajeJS</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"js/comenzando/","title":"JavaScript","text":"<p>Este lenguaje fue creado para funcionar dentro de los navegadores web. Su desarrollo y estandarizacion fue iniciativa de la compa\u00f1\u00eda Netscape, los creadores del Netscape Navigator.</p>","tags":["JavaScript"]},{"location":"js/comenzando/#tipos-archivo","title":"Tipos Archivo","text":"<p>Los archivos de JavaScript tienen la extension .js . Estos archivos son invocados por el documento HTML usando la etiqueta script. Ejemplo: <pre><code>&lt;body&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt; \n&lt;/body&gt;\n</code></pre> Comentarios Los comentarios de una sola linea en JavaScript son precedidos por dos barras inclinadas (slash). Ejemplo: <pre><code>// Este es mi comentario\n</code></pre> Si en cambio se busca comentar m\u00faultiples lineas se usa un par barra - asterisco para comenzar y un par asterisco - barra para cerrar. Ejemplo: <pre><code>/*\nMi bloque de comentarios\n*/\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#console","title":"Console","text":"<p>Con JavaScript se puede interactuar con la consola de los navegadores web. Para ello se usan los m\u00e9todos de Console. Ejemplos: <pre><code>console.log(\"Hola mundo!\")              //escribe en consola\nconsole.error(\"Mi mensaje de error\")    //crea un mensaje de error\n</code></pre> La consola ayuda al debug de los sitios web en desarrollo.</p>","tags":["JavaScript"]},{"location":"js/comenzando/#document","title":"Document","text":"<p>Esta instrucci\u00f3n permite interactuar con el archivo HTML que invoque la rutina. Ejemplo: <pre><code>document.write(\"&lt;h1&gt;Hallo Welt!&lt;/h1&gt;\");  // Escribe un t\u00edtulo\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#tipos-de-datos","title":"Tipos de Datos","text":"<pre><code>\"Hola mundo\"\n'Hola mundo'\n</code></pre> <p>Importante: NO mezclar comillas al delimitar un string porque da error.   Si hay que imprimir las comillas en pantallas\u00e9stas se pueden marcar con su simbolo ASCII ,usando la barra invertida (\\) quedando \\' \u00f3 \\\" . </p> <p>Ejemplo de uso:</p> <pre><code>console.log(\"soy una cadena de caracteres \\\"con comillas\\\"\")\n</code></pre> <p>Otra opcion: usar ambos tipos de comillas. Ejemplo:</p> <pre><code>console.log('soy otra cadena de caracteres \\\"con comillas\\\"')\n</code></pre> <p>Se escriben directamente. Si tienen parte decimal se indica con un punto. </p> <p>Ejemplos:   <pre><code>999\n-7.8\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#cadenas-de-caracteres-string","title":"Cadenas de caracteres (string)","text":"Se marcan entre comillas dobles o simples. Ejemplos:","tags":["JavaScript"]},{"location":"js/comenzando/#numeros-number","title":"Numeros (number)","text":"","tags":["JavaScript"]},{"location":"js/comenzando/#booleanos-boolean","title":"Booleanos (boolean)","text":"Los valores l\u00f3gicos se escriben en min\u00fasculas:   <pre><code>true      // verdadero\nfalse     // falso\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#undefined","title":"undefined","text":"Indefinido \u2192\u00bftipo comod\u00edn?","tags":["JavaScript"]},{"location":"js/comenzando/#null","title":"null","text":"","tags":["JavaScript"]},{"location":"js/comenzando/#symbol","title":"symbol","text":"","tags":["JavaScript"]},{"location":"js/comenzando/#tipado-de-datos","title":"Tipado de Datos","text":"<p>JavaScript tiene tipado d\u00e9bil. Los tipos de datos de las variables pueden cambiar en cada asignaci\u00f3n.</p>","tags":["JavaScript"]},{"location":"js/comenzando/#arreglos-arrays","title":"Arreglos (arrays)","text":"<p>Los arrays son conjuntos de elementos marcados con corchetes y separados por comas:</p> <pre><code>['joe','ryan','martha']\n[1, 5 ,0,-5]\n[true, false, false]\n</code></pre> <p>Los arrays son indexables, esto significa que sus elementos pueden ser consultados en base a su n\u00famero de aparici\u00f3n rodeado de corchetes. El primer elemento del array es el n\u00famero cero. Ejemplo:</p> <pre><code>lista = ['joe','ryan','martha']\nconsole.log(lista[0]);\nconsole.log(lista[1]);\nconsole.log(lista[2]);\nconsole.log(lista[3]);      //elemento inexistente\n</code></pre> <p>Si se intenta consultar un valor inexistente la consola devuelve el valor 'undefined' pero no falla la ejecuci\u00f3n de la rutina por si sola. la cantidad de elementos de un array se puede consultar con el m\u00e9todo length.En el ejemplo previo:</p> <pre><code>console.log(lista.length);\n</code></pre> <p>Un array puede ser anidado (o \"multidimensional\"), es decir puede estar compuesto por varios arrays internos separados por comas. El acceso se hace indicando varios \u00edndices, uno por dimensi\u00f3n. Ejemplo: arreglo estilo matriz:</p> <pre><code>matriz = [[1, 2, 3],[ 4, 5, 6]]; //matriz rectangular, dos dimensiones\nmatriz[0][1] = 7;   //reescritura del primer array, segundo elemento\nconsole.log(matriz)\n</code></pre> <p>Los arrays son mutables: pueden alterarse elemento a elemento con el m\u00e9todo push se puede a\u00f1adir un elemento al final del array. Ejemplo:</p> <pre><code>var estaciones = [\"invierno\", \"oto\u00f1o\", \"primavera\"]\nestaciones.push(\"verano\")\nconsole.log(estaciones)\n</code></pre> <p>El metodo pop permite eliminar el ultimo elemento de un arreglo y tambi\u00e9n obtenerlo como valor de retorno:</p> <pre><code>var quitado = estaciones.pop()\n</code></pre> <p>El metodo shift elimina el primer elemento del array y lo devuelve como retorno:</p> <pre><code>quitado = estaciones.shift()\n</code></pre> <p>El m\u00e9todo unshift a\u00f1ade un elemento al comienzo del arreglo: <pre><code>estaciones.unshift(\"Verano\")\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#objetos-objects","title":"Objetos (objects)","text":"<p>Los objetos se indican entre corchetes. Poseen pares propiedad - valor ,en ese sentido se parecen mucho a los diccionarios de Python. </p> <p>Ejemplo:</p> <p><pre><code>ficha_usuario = {\n\"username\": 'ryan',\n\"score\": 70.4,\n\"hours\": 14,\n\"professional\" : true,\n\"friends\": ['yoh','meh','sih',]\n}\n</code></pre> Una misma propiedad puede tener varios valores en forma de arreglo (entre corchetes). Para acceder al valor de una propiedad se puede usar la notaci\u00f3n de punto:</p> <pre><code>var user = ficha_usuario.username\n</code></pre> <p>Tambi\u00e9n se puede usar la notacion de corchete:</p> <pre><code>var user = ficha_usuario[\"username\"]\n</code></pre> <p>Esta \u00faltima notaci\u00f3n sirve para hacer consultas con variables:</p> <pre><code>var user = ficha_usuario[campo_variable]\n</code></pre> <p>A los objetos se les puede a\u00f1adir nuevos pares propiedad - valor con una simple asignaci\u00f3n:</p> <pre><code>ficha_usuario[\"last_login\"] = 7;\n</code></pre> <p>Para eliminar campos se usa la directiva delete. Dos notaciones posibles:</p> <pre><code>delete ficha_usuario.hours;\ndelete ficha_usuario[\"friends\"];\n</code></pre> <p>Para verificar la existencia de una propiedad se usa el metodo 'hasOwnPorperty()':</p> <p><pre><code>ficha_usuario.hasOwnProperty(\"score\");      //da true\nficha_usuario.hasOwnProperty(\"banneado\");   //da false\n</code></pre> Comentario: los objetos de JS son los que le dan nombre a los archivos JSON (\"JavaScript Object Notation\")</p>","tags":["JavaScript"]},{"location":"js/comenzando/#variables","title":"Variables","text":"<p>Las variables de JavaScript se crean al inicializarlas. Sus nombres pueden tener letras, numeros y guiones bajos como pasa en otros lenguajes y con restricciones similares (por ejemplo no pueden empezar con un numero.) Las asignaciones se realizan con el signo igual y terminan en punto y coma. Ejemplo:</p> <pre><code>nombre_usuario = \"John\" ;   //inicializacion\nconsole.log(nombre_usuario) //escritura en consola\n</code></pre> <p>Las declaraciones de variables suelen estar precedidas por las palabras var y let:</p> <pre><code>var nombre      = \"Napole\u00f3n\"\nlet apellido    = \"Bonaparte\"\n</code></pre> <p>La diferencia entre una declaraci\u00f3n var y una declaraci\u00f3n let es que con let se verifica de que no exista una variable con igual nombre, en cambio con var se reescribe cualquier variable preexistente con igual nombre. Adem\u00e1s, las variables let permiten implementar variables locales se destruyen apenas  se salen de su bloque de declaraci\u00f3n, sea un bucle, una funcion etc. El resultado es una especie de sobrecarga de variables con distintas visibilidades al estilo del C++. Ejemplo:</p> <pre><code>var i = 33 ; //variable global\nfor (let i=0; i&lt;10; i++){   //variable local para el bucle\nconsole.log(i)  //lee la variable local\n}\nconsole.log(i)  //lee la variable global\n</code></pre> <p>A la hora de darle nombre a las variables lo m\u00e1s habitual es darles el formato \"camelcase\" que consiste en escribir todo junto pero con la primera letra de cada palabra en mayuscula. Ejemplo:</p> <pre><code>var miNombreDePila = \"Pepe\" //Camelcase\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#constantes","title":"Constantes","text":"<p>Se puede crear parametros constantes con la palabra const:</p> <pre><code>const PI = 3.14159;\n</code></pre> <p>A las constantes habitualmente se las llama con mayusculas. Los arrays pueden ser definidos como 'const' impidiendo su modificacion completa; sin embargo esto no impide la modificacion elemento a elemento del array:</p> <pre><code>const arreglo = [\"chanchito\", 0]\narreglo = [\"chanchito\", \"feliz\"]  //da error\narreglo[1] = \"feliz\"    //est\u00e1 permitido\n</code></pre> <p>Para que los objetos sean inmutables (constantes) primero se los inicializa y luego se los pasa a la funci\u00f3n Object.freeze(). Ejemplo:</p> <pre><code>let color = {           //se crea el objeto color\n\"rojo\" : \"#ff0000\",\n\"verde\": \"#00ff00\",\n\"azul\" : \"#0000ff\"\n}\nObject.freeze(color);   //se hace inmutable el objeto color\n//Se intenta a\u00f1adir un elemento m\u00e1s\ncolor.amarillo=\"#fff200\";   //Puede dar mensaje de error. Sino se ignora\nconsole.log(color)\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#operadores","title":"Operadores","text":"<ul> <li>Suma \u2192 + <pre><code>let N1 = 7;\nlet N2 = 3;\nlet M = N1 + N2;\nconsole.log(M)\n</code></pre></li> <li>Resta \u2192 signo -</li> <li>Incremento y Decremento <pre><code>index++;            //sumar 1\nindex--;            //restar 1\n</code></pre></li> <li>Multiplicacion \u2192 *</li> <li>Division \u2192 signo /   (decimales)</li> </ul> <p>En caso de dividir por cero da \"infinity\" - Resto \u2192 signo %</p> <pre><code>(para obtener el cociente entero de la division se usa normalmente la funci\u00f3n Math.floor)\n</code></pre> <ul> <li>Potencia \u2192 ** <code>javascript   2**3;   // 2 al cubo. Da 8</code></li> </ul>","tags":["JavaScript"]},{"location":"js/comenzando/#operadores-de-asignacion-compuesta","title":"Operadores de Asignacion Compuesta","text":"<p>JavaScript admite afectar variables ya inicializadas con la notacion reducida: <pre><code>var x = 3;      //inicializacion\nx += 4          //x = x + 4\nx *= 7          //x = x * 7\n//etc\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#concatenacion-texto-signo","title":"Concatenaci\u00f3n texto --&gt; signo +","text":"<pre><code>let texto = \"John\" + \" \" + \"Doe\"\nconsole.log(texto)\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#operadores-comparacion","title":"Operadores Comparacion","text":"<p>Usan los signos '&lt;' , '&gt;', '==' , '&gt;=' , '&lt;=' y '!='. </p> <p>Ejemplo:</p> <pre><code>resultado = 5 &gt; 8;\nconsole.log(resultado)\n</code></pre> <p>Estos comparadores comparan valores pero no los tipos de datos:</p> <pre><code>console.log(5 == \"5\")  //da true\n</code></pre> <p>Los strings se comparan con criterios alfab\u00e9ticos primero y por longitud despu\u00e9s:</p> <pre><code>console.log( \"A\" &gt; \"B\")     //false\nconsole.log( \"A\" &lt; \"B\")     //true\nconsole.log( \"AD\" &gt; \"B\")    //falso\nconsole.log( \"D\" &gt; \"AD\")    //verdadero\nconsole.log( \"D\" &gt; \"DE\")    //falso\n</code></pre> <p>Estos operadores NO sirven para comparar arreglos.</p> <pre><code>console.log([1,2,3] == [1,2,3]) //da  false\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#igualdad-estricta","title":"Igualdad Estricta","text":"<p>La comparaci\u00f3n '===' es estricta: compara tambien los tipos de datos de las variables.</p> <p><pre><code>console.log(5 === \"5\") // da false\n</code></pre> Existe tambi\u00e9n la desigualdad estricta ('!==') que diferencia valores y tipos</p>","tags":["JavaScript"]},{"location":"js/comenzando/#operadores-logicos","title":"Operadores Logicos","text":"<ul> <li>AND \u2192 &amp;&amp;</li> <li>OR  \u2192 ||</li> <li>NOT \u2192 !</li> <li>XOR \u2192 ^ (acento circunflejo)</li> </ul>","tags":["JavaScript"]},{"location":"js/comenzando/#operadores-logicos-bit-a-bit","title":"Operadores Logicos (bit a bit)","text":"<ul> <li>AND \u2192 &amp;</li> <li>OR  \u2192 |</li> <li>NOT \u2192 ~</li> <li>XOR \u2192 ^ (acento circunflejo)</li> </ul>","tags":["JavaScript"]},{"location":"js/comenzando/#inmutabilidad-de-strings","title":"Inmutabilidad de Strings","text":"<p>Los strings de JS NO pueden ser alterados elemento a elemento. S\u00f3lo pueden ser alterados reescribi\u00e9ndolos por completo. Ejemplo: <pre><code>miCadena = \"Yo soy Sam\";\nmiCadena[0] = \"N\";      //la primera letra no se reeescribe y puede dar error 'TypeError'\nmiCadena = \"No soy Sam\"; //se reescribe por completo\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#control-de-flujo","title":"Control de Flujo","text":"","tags":["JavaScript"]},{"location":"js/comenzando/#condicional-if","title":"Condicional if","text":"<pre><code>if (condicion){\n    console.log(\"Condicion verdadera\");\n}\nif (condicion == false){\n    onsole.log(\"Condicion falsa\");\n}\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#condicional-if-else","title":"Condicional if-else","text":"<pre><code>if (condicion){\n    console.log(\"Condicion verdadera\");\n}else{\n    console.log(\"Condicion falsa\");\n}\n</code></pre> <p>Puede haber condiciones intermedias usando 'else if':</p> <pre><code>if (condicion1){\n    console.log(\"Condicion 1 verdadera\");\n}else if (condicion2){\n    console.log(\"Condicion 1 falsa, condicion 2 verdadera\");\n}else{\n    console.log(\"Condicion falsa\");\n}\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#cambiar-switch","title":"Cambiar (Switch)","text":"<p>Este tipo de condicional permite evaluar varias condiciones de forma secuencial y empezar a ejecutar a partir de la primera verdadera. Ejemplo:</p> <p><pre><code>switch( variable){\n    case 'A':       //\"variable\" igual a 'A'\n        console.log(\"caso A\");\n    case 'B':       //\"variable\" igual a 'B'\n        console.log(\"caso B\");\n    default:\n        console.log(\"otros\");\n    }\n</code></pre> Si se desea ejecutar solamente las instrucciones de la priemra instruccion correcta hay que a\u00f1adir la palabra break (\"romper\") al final del bloque de instrucciones. Ejemplo:</p> <p><pre><code>switch( variable){\n    case 'A':\n        console.log(\"caso A\");\n        break;\n    case 'B':\n        console.log(\"caso B\");\n        break;\n    default:\n        console.log(\"Ninguno de los anteriores\");\n    }\n</code></pre> Varios casos pueden apuntar a una misma orden:</p> <pre><code>switch( variable){\n    case 'A':\n    case 'B':\n    case 'C':\n        console.log(\"Es A, B o C\");\n        break;\n    default:\n        console.log(\"Ninguno de los anteriores\");\n    }\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#mientras-while","title":"Mientras (While)","text":"<p>El bucle condicional toma la siguiente forma:</p> <pre><code>contador = 5;\n    while(contador &gt;= 0){\n    console.log(contador);\n    contador--;\n}\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#do-while","title":"Do - While","text":"<p>Al igual que el C , Javascript incluye el bucle Do - While. En este caso la rutina interna se ejecuta al menos una vez.</p> <pre><code>do{\n    &lt;rutina&gt;\n    &lt;actualizacion condicion&gt;\n}while(&lt;condicion&gt;);\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#para-for","title":"Para (For)","text":"<p>El bucle for en JS es pr\u00e1cticamente igual al del lenguaje C. Ejemplo: recorrer una lista de nombres del primero al ultimo:</p> <pre><code>let lista = ['joe','ryan','martha']\n//para conocer el numero de elementos se usa el m\u00e9todo lenght\nfor(let i = 0; i &lt; lista.length ;i++){\n    console.log(lista[i]);\n    }\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#funciones","title":"Funciones","text":"<p>Las funciones se definen con la palabra reservada function:</p> <pre><code>function nombre_funcion( &lt;argumentos&gt;){\n    // Rutina\n    return &lt;valor&gt;; //valor de retorno (opcional)\n    }\n</code></pre> <p>Para llamarlas se escribe su nombre y sus argumentos entre par\u00e9ntesis. Si no hay argumentos se  escriben los par\u00e9ntesis vacios. Ejemplo:</p> <pre><code>//definicion funcion, sin argumentos\nfunction saludos(){\n    console.log(\"Hola!\");\n    }\n//llamado funcion\nsaludos();\n</code></pre> <p>Cuando no se especifica el valor de retorno este vale 'Undefined' por defecto. Las variables internas a una funcion son privadas, es decir no pueden ser leidas desde el exterior. Una misma funcion pueden tener m\u00faltiples sentencias de return,por ejemplo dentro de bifurcaciones. La primera en ejecutarse dar\u00e1 fin a la funci\u00f3n, esto se llama \"retorno anticipado\"</p>","tags":["JavaScript"]},{"location":"js/comenzando/#funcion-flecha","title":"Funcion Flecha","text":"<p>las funciones flecha permiten definir funciones m\u00e1s compactas con la siguiente notaci\u00f3n:</p> <pre><code>const &lt;nombre_funcion&gt; = (&lt;argumentos&gt;) =&gt; &lt;instrucci\u00f3n&gt;;\n</code></pre> <p>Ejemplo: leer fecha actual del sistema:</p> <pre><code>//definicion\nconst fecha = () =&gt; new Date();\n//uso\nvar hoy = fecha();\n</code></pre> <p>Las funciones flecha son similares a las funciones lambda de Python. Las variables pueden tener sus propios valores por defecto, estos se asignan en la definicion.Ejemplo: una funcion con segundo argumento que tiene valor por defecto 1.</p> <pre><code>const incrementar =(num, valor = 1) =&gt; num + valor;\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#operador-rest","title":"Operador Rest","text":"<p>Para hacer variable el n\u00famero de argumentos de una funcion se usan tres puntos y un nombre de argumento:</p> <pre><code>function &lt;nombre_funcion&gt;(...&lt;argumento&gt;){\n    //...\n    }\n</code></pre> <p>Los argumentos dados se consultan internamente como si fueran un array de elementos.En otras palabras '...' (rest) reune todos los argumentos en un \u00fanico array.</p> <p>Ejemplo: una suma acumulativa.</p> <pre><code>const sumar = (...argumentos) =&gt;{\n    return argumentos.reduce((a, b) =&gt; a+b , 0)\n    };\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#operador-spread","title":"Operador Spread","text":"<p>Los '...' pueden colocarse delante de un array para desparramar ('spread') sus elementos internos en varias variables. Es lo contrario a 'rest' Ejemplo: una funcion que pide tres argumentos y un arreglo de tres elementos.</p> <pre><code>function sumar(x,y,z){\n    //................\n    }\nconst numeros = [8, 15, 25 ];\nsumar(...numeros)   //se usa el spread\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#sintaxis-de-desestructuracion","title":"Sintaxis de Desestructuraci\u00f3n","text":"<p>Los objetos se pueden \"desarmar\" en variables f\u00e1cilmente indicando las propiedades entre corchetes:</p> <pre><code>const {&lt;propiedad1&gt;, &lt;propiedad2&gt;,...} = &lt;objeto&gt;;\n</code></pre> <p>Ejemplo:</p> <pre><code>const usuario =  {\n    nombre : \"Aquiles Brinco\",\n    edad : 48\n}\n//desestructuracion\nconst {edad, nombre} = usuario;\n</code></pre> <p>Las nuevas variables pueden ser renombradas indicando su nuevo nombre con dos puntos:</p> <pre><code>const {edad: age, nombre: names} = usuario;\n</code></pre> <p>No es necesario que todas las propiedades sean convertidas a variables. La desestructuraci\u00f3n tambi\u00e9n puede hacerse con objetos anidados as\u00ed:</p> <pre><code>const {&lt;objeto_interno&gt;: {&lt;propiedad1&gt;, &lt;propiedad2&gt;,...} }= &lt;objeto_exterior&gt;;\n</code></pre> <p>La desestructuracion puede hacerse con funciones flecha, como se muestra:</p> <pre><code>//definicion\nconst &lt;funcion&gt; = ({&lt;propiedad1&gt;, &lt;propiedad2&gt;,...}) =&gt; &lt;instruccion&gt; ;\n//uso\n&lt;funcion&gt;(&lt;objeto&gt;)\n</code></pre> <p>La desestructuraci\u00f3n puede hacerse con arreglos, colocando las variables ordenadamente entre corchetes y asignando:</p> <pre><code>var a,b,...;\n[a,b,...] = lista;\n</code></pre> <p>Para saltar elementos de un array se dejan espacios vac\u00edos entre comas. Por ejemplo, para tomar el primer y cuarto valor de un array se puede hacer:</p> <p><pre><code>[b, , ,a] = [\"A\", false, 7, 81];\n</code></pre> Este mismo sistema se puede usar con el operador rest.</p> <p>Ejemplo: descartar tres primeros elementos: <pre><code>[, , , ...nuevo_arreglo] = arreglo_original;\n</code></pre></p>","tags":["JavaScript"]},{"location":"js/comenzando/#metodos","title":"M\u00e9todos","text":"<p>Los m\u00e9todos son las funciones dedicadas de los tipos de datos. - \\&lt;string&gt;.toLowerCase() \u2192 conversion a minusculas - \\&lt;string&gt;.toUpperCase() \u2192 conversion a mayusculas - \\&lt;arreglo_1&gt;.concat(\\&lt;arreglo_2&gt;) \u2192 concatena un segundo arreglo al primero - \\&lt;arreglo&gt;.reduce() \u2192 reduce el arrreglo a un solo valor num\u00e9rico en base a una funci\u00f3n especificada como argumento.</p> <p>Ejemplo: una funcion para hacer una cola (FIFO) sobre un arreglo, a\u00f1adiendo un valor al final y devolviendo el valor removido.</p> <pre><code>function Cola(arreglo, elemento){\n    arreglo.push(elemento) ;            //agregar elemento\n    primer_elemento = arreglo.shift();  //remocion primer valor\n    retorno primer_elemento ;\n}\n</code></pre> <p>para formatear los arreglos antes de consola se suele usar la funcion JSON.stringify() .</p>","tags":["JavaScript"]},{"location":"js/comenzando/#numeros-aleatorios","title":"Numeros Aleatorios","text":"<ul> <li>Decimales</li> </ul> <pre><code>var numero = Math.random(); //valores pseudoaletorios decimales, rango [0, 1)\n</code></pre> <ul> <li>Enteros menores o iguales a un valor</li> </ul> <pre><code>var entero =Math.floor( (&lt;maximo&gt; + 1) * Math.random());\n</code></pre> <ul> <li>(etc)</li> </ul>","tags":["JavaScript"]},{"location":"js/comenzando/#conversiones","title":"Conversiones","text":"<pre><code>parseInt(\"valor\")\nparseInt(\"valor\",&lt;base&gt;) --&gt;convierte a decimal desde la base indicada\n</code></pre> <p>Ejemplos:</p> <pre><code>parseInt(\"F\",16) //da 15\nparseInt(\"101\",2) //da 5\nparseFloat(\"valor\")\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#condicional-ternario","title":"Condicional Ternario","text":"<p>Comprime el if - else a una sola l\u00ednea:</p> <pre><code>&lt;condicion&gt; ? &lt;instruccion_verdadero&gt; :&lt;instruccion_falso&gt;\n</code></pre> <p>Ejemplo:</p> <pre><code>function retornarMinimo(x, y){\n    return x &lt; y ? x : y;\n    }\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#condicional-ternario-anidado","title":"Condicional Ternario Anidado","text":"<pre><code>function compararNumeros(a, b){\n    return a == b ?\n        : a &gt; b ? \"a es amyor a b\"\n        : \"b es mayor que a\";\n    }\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#plantillas-literales-o-plantillas-de-cadenas","title":"Plantillas Literales o Plantillas de Cadenas","text":"<ul> <li>Usan el acento invertido (bactick) ` en lugar de comillas</li> <li>Pueden contener comillas simples y dobles</li> <li>Las lineas se preservan como se escriben en el codigo</li> <li>Para reemplazar una variable se escribe ${\\&lt;variable&gt;}</li> <li>Dentro de '${}' se puede escribir expresiones.</li> </ul> <p>Ejemplo:   <pre><code>var b = \"chanchito\";\nvar texto = `El valor de 'b' es ${b}  `;\n</code></pre></p> <p>Crear objetos de forma concisa permite devolver un objeto como retorno de una funcion. Los valores se indican entre llaves. Ejemplo:</p> <pre><code>const crearPersona = (nombre,edad,idioma) =&gt; ({nombre,edad,idioma});\nobjetoPersona= crearPersona(\"chanchito\",35,\"espa\u00f1ol\")\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#metodos-personalizados","title":"M\u00e9todos Personalizados","text":"<p>Definicion: 'M\u00e9todo' es una funcion que es valor de una propiedad En el siguiente ejemplo se devuelve una funcion como valor de una propiedad</p> <p><pre><code>const persona ={\n  nombre: \"Isabel\",\n  presentarse: function(){\n  return `\u00a1Hola! Mi nombre es ${this.nombre}.`;\n  }\n};\n</code></pre> 'This' hace refencia al nombre del objeto donde se invoca. Es similar al 'self' de las clases de Python. Al finalizar la funcion interna del objeto puede invocarse como m\u00e9todo con el nombre 'presentarse': var presentacion = persona.presentarse();</p>","tags":["JavaScript"]},{"location":"js/comenzando/#clases","title":"Clases","text":"<p>Las clases de JS son m\u00e1s limitadas que las de otros lenguajes. Son meras plantillas para crear objetos. La funcion 'constructor()' es la que constructora de la clase y siempre se usa. Se definen con la palabra class y su nombre siempre empieza con mayusculas</p> <p><pre><code>class Transbordador{\n  constructor(planeta){\n  this.planeta = planeta;\n  }\n}\n</code></pre> Para crear un objeto de la clase se usa la palabra new:</p> <pre><code>var zeus = new Transbordador(\"Jupiter\");\nconsole.log(zeus.planeta)\nvar apolo = new Transbordador(\"Marte\")\nconsole.log(apolo.planeta)\n</code></pre>","tags":["JavaScript"]},{"location":"js/comenzando/#getters-y-setters","title":"Getters  y Setters","text":"<p>Algo similar a las funciones p\u00fablicas 'get' y 'set' de otros lenguajes para manejar propiedades privadas, las cuales se marcan con un guion bajo adelante del nombre.</p> <pre><code>class Libro{\n    constructor(autor){\n    this._autor = autor;    //propiedad privada\n        } \n\n    get autor(){\n        return this._autor;\n        }\n\n    set autor(nuevoAutor){\n        this._autor = nuevoAutor;\n        }\n}\n\nconst libro = new Libro(\"Anonimo\");\nconsole.log(libro.autor);\nlibro.autor = \"Chanchito\";\nconsole.log(libro.autor);\n</code></pre> <p>get y set permiten definir variables alias (apodo) para la propiedad privada de modo de no alterarla directamente.</p>","tags":["JavaScript"]},{"location":"js/comenzando/#referencias","title":"Referencias","text":"<p>[^1] Referencia: Curso Javascript para Principiantes - Fazt</p> <p>[^2] Aprende JavaScript Curso Completo desde Cero - FreeCodeCamp Espa\u00f1ol</p>","tags":["JavaScript"]},{"location":"node/asincronia/","title":"Ejecucion asincronica","text":"<p>NodeJS intenta ejecutar las llamadas al sistema de modo asincr\u00f3no. Por ejemplo si creamos un archivo:  <pre><code>const fs = require('fs');\n//llamada al sistema operativo para crear un archivo\nfs.writeFile('./texto.txt','mi comunicado ',function (err){\n    if (err){\n        console.log(err);\n    }else{\n        console.log(\"archivo creado!\")\n    }        \n}) \n//rutinas siguientes\nconsole.log(\"Fin de rutina de archivo\")\n</code></pre> Se ver\u00e1 que la rutina da el mensaje de finalizaci\u00f3n antes que el mensaje de creaci\u00f3n exitosa. Sin embargo es posible ejecutar las llamadas al sistema de modo bloqueante. REVISAR</p> <p>Ejemplo Aplicacion: servidor HTTP sencillo <pre><code>const http = require('http');\n\npuerto=9999;\n\nconst handleServer = function (req, res){\n    res.writeHead(200,{'content-type': 'text/html'});\n    res.write('&lt;h1&gt;Hola Mundo desde NodeJS&lt;/h1&gt;');\n    res.end();\n} \n\nconst server = http.createServer(handleServer);\n\nserver.listen(puerto,function (){\n    console.log(\"Servidor en puerto: \", puerto);\n})\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/","title":"Modelo Cliente-Servidor","text":"<p>HTTP define el formato de los mensajes entre servidor y cliente (HyperText Transfer Protocol )</p> <p>Protocolo: conjunto de reglas que permiten transmitir la informaci\u00f3n.</p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#solicitudes-http-request","title":"Solicitudes HTTP (request)","text":"<ul> <li>m\u00e9todos HTTP</li> <li>camino (path)</li> <li>version HTTP</li> <li>headers</li> <li>body </li> </ul>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#metodos-http","title":"M\u00e9todos HTTP","text":"<ul> <li>GET  --&gt; solicitar recurso especifico</li> <li>POST --&gt; crear recurso especifico</li> <li>PUT  --&gt; modificar recurso especifico</li> <li>DELETE --&gt; eliminar recurso especifico</li> <li>otros</li> </ul>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#respuesta-http-response","title":"Respuesta HTTP (response)","text":"<ul> <li>metodos HTTP</li> <li>camino (path)</li> <li>version HTTP</li> <li>headers</li> <li>body </li> </ul>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#codigos-de-estado","title":"Codigos de estado","text":"<p>Son numeros que indican si se complet\u00f3 correctamente la solicitud http o no respuestas: - informativas: 1xx - satisfactorias: 2xx - redirecciones: 3xx - errores de clientes: 4xx - errores de servidores: 5xx</p> <p>M\u00e1s frecuentes: - 200 OK - 400 bad Request - 404 Not Found - 500 Internal Server Error</p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#modulo-http","title":"M\u00f3dulo HTTP","text":"<p>M\u00f3dulo de NodeJS dedicado al protocolo HTTP Iimportaci\u00f3n:</p> <pre><code>const http = require('http');\n</code></pre> <p>Crear servidor: <pre><code>const servidor = http.createServer((req, res) =&gt;{\n  console.log(\"Nueva solicitud\")\n  res.end(\"Hola mundo!\");\n});\n</code></pre> Poner al servidor a escuchar: <pre><code>const PUERTO = 3000;\nservidor.listen( PUERTO , ()=&gt;{\n  console.log(`Servidor escuchando, http://localhost:${PUERTO}`)\n})\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#req-y-res","title":"req y res","text":"<ul> <li>req: request</li> <li>res: response</li> </ul> <p>Las solicitudes (req) tienen varios m\u00e9todos para leerlas: <pre><code>req;  //valores del request\nreq.url;      //URL\nreq.method;   //m\u00e9todo: GET, POST, PUT, DELETE, etc \nreq.headers; //Encabezamiento \nreq.statusCode; //c\u00f3digo de estado : 200, 404 etc\n</code></pre> La respuesta del servidor (res) se puede consultar y tambi\u00e9n configurar: <pre><code>res.setHeader('content-type','application/json'); //ejemplo asignacion\nres.getHeaders(); //consulta\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#estructura-url","title":"Estructura URL","text":"<p>URL (Uniform Resource Locator) direccion de un recurso web</p> <p>Estructura:</p> <ul> <li>protocolo : HTTP u otros</li> <li>subdominio</li> <li>dominio : referencia unica a un sitio web </li> <li>camino (path): archivo o directorio del servidor. Puede incluir par\u00e1metros.</li> </ul> <p>parametros query Los par\u00e1metros de query (busqueda) se usan para obtener contenido din\u00e1mico. van atr\u00e1s de un signo de interrogaci\u00f3n:</p> <pre><code>&lt;dominio&gt;/&lt;path&gt;?&lt;parametro1=valor1&gt;&amp;&lt;parametro2=valor2&gt;&amp;...\n</code></pre> <p>Ejemplo: b\u00fascar 'opera' en DuckDuckGo</p> <pre><code>https://duckduckgo.com/?q=opera&amp;t=opera&amp;ia=web\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/cliente-servidor/#modulo-url","title":"M\u00f3dulo URL","text":"<pre><code>const &lt;descriptor&gt; = new URL('&lt;direccion_completa&gt;');\n</code></pre> <p><pre><code>&lt;descriptor&gt;.hostname;\n&lt;descriptor&gt;.pathname;\n&lt;descriptor&gt;.searchParams;\n</code></pre> Los parametros de la URL se pueden consultar con el sub metodo get: <pre><code>&lt;descriptor&gt;.searchParams.get(&lt;parametro&gt;);\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/eventos_promesas/","title":"Eventos y promesas","text":"","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/eventos_promesas/#eventos","title":"Eventos","text":"<p>Evento --&gt; Accion realizada en al aplicacion. Es una accion que desencadena un proceso Node est\u00e1 basado en eventos asincronos</p> <p>Emmiter --&gt; Emisor Son objetos que emiten eventos y llaman a funciones especificas cuando ocurren.</p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/eventos_promesas/#module-events","title":"Module Events","text":"<ul> <li>Definir</li> <li>Emitir</li> <li>Escuchar</li> </ul>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/eventos_promesas/#emitir-eventos","title":"Emitir Eventos","text":"<p>Primero se importa el modulo events d\u00e1ndole un nombre de clase y se crea un emisor de eventos: <pre><code>const &lt;clase_eventos&gt; = require('events')\nconst &lt;nombre_emisor&gt; = new &lt;clase_eventos&gt;();\n</code></pre> Luego se define los eventos, con sus funciones asociadas: <pre><code>&lt;nombre_emisor&gt;.on (&lt;nombre_evento&gt;, (&lt;argumentos&gt;) =&gt;{\n  //rutina de la funcion flecha creada\n})\n</code></pre> Para invocar el evento se escribe: <pre><code>&lt;nombre_emisor&gt;.emit(&lt;nombre_evento&gt;,&lt;argumentos&gt;)\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/eventos_promesas/#promesas","title":"Promesas","text":"<p>Es un objeto que representa el resultado o error de una operaci\u00f3n as\u00edncrona.</p> <p>Tres estados posibles: - pendiente (pending) - cumplida (fulfilled) - rechazada (rejected)</p> <p>La promesa se asocia a un callback function. La funci\u00f3n callback se pasa como argumento a otra funci\u00f3n para que la ejecute.</p> <pre><code>const promesaCumplida = false;\nconst miPromesa = new Promise((resolve,reject) =&gt;{\n  set Timeout(()=&gt;{\n    if (promesaCumplida){\n      resolve(\"Hecho!\");\n    } else{\n      reject(\"Rechazado\");\n    }\n  },3000);    //3 segundos\n});\n\nconst promesaCumplida = (valor) =&gt; {\n  console.log(valor);\n};\n\npromesaRechazada = (valor) =&gt;{\n  console.log(valor);\n}\n\nmiPromesa.then(promesaCumplida , promesaRechazada);\n</code></pre> <p>Las promesas rechazadas se pueden manejar con el metodo .catch() : </p> <p><pre><code>miPromesa.then(promesaCumplida).catch(promesaRechazada);\n</code></pre> REVISAR</p> <p>chaining promises </p> <p>async await ejemplo: <pre><code>async function realizarPedido(producto){\n  try{\n    const respuesta = await ordenarProducto(producto);\n    const respuestaProcesada = await procesarPedido(respuesta);\n  }catch(error){  \n    //rutina error\n  }\n}\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/intro-node/","title":"NodeJS","text":"<p>Es un entorno de ejecuci\u00f3n para crear aplicaciones de backend, de escritorio y aplicaciones m\u00f3viles escritas en Javascript. Esto permite utilizar la ventana de comandos del sistema operativo en vez de un navegador de Internet. Est\u00e1 orientado a eventos asincronos.</p> <p>(Los eventos asincronos se ejecutan independientemente del proceso principal de la aplicacion). Basado en el motor V8 de Google. (El motor es el software que ejcuta c\u00f3digo)</p> <p>Para conocer la version de NodeJS instalada escribir en terminal: <pre><code>node --version\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/intro-node/#ejecucion-de-rutinas","title":"Ejecucion de rutinas","text":"<p>Para ejecutar desde terminal una rutina de javascript nos ubicamos en el directorio y ejecutamos: <pre><code>cd &lt;ruta_a_rutina&gt;\nnode &lt;mi_rutina.js&gt;\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/intro-node/#consola","title":"Consola","text":"<p>Cuando queremos interactuar con el usaurio se usa la consola.Ejemplo: escribir en la terminal un texto o valor de variable: <pre><code>console.log(\"&lt;texto&gt;\")\nconsole.log(&lt;variable&gt;)\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/intro-node/#referencias","title":"Referencias","text":"<p>https://www.npmjs.com/</p> <p>https://pnpm.io/installation</p> <p>Referencia: Nodejs Curso Desde Cero, para principiantes - Fazt https://www.youtube.com/watch?v=BhvLIzVL8_o repositorio del curso: https://github.com/FaztWeb/nodejs-course</p> <p>Sitio oficial:  https://nodejs.org</p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/json/","title":"Introduccion a JSON","text":"<p>JSON es un formato de texto usado para almacenar y transportar informacion.  Nos permite almacenar objetos de JS en texto.</p> <p>Para leer un archvo JSON preexistente se puede usar el require(): <pre><code>const objeto = require('./archivo.json')\n</code></pre> Para convertir un objeto a texto se usa el metodo stringify(): <pre><code>texto = JSON.stringify(objeto);\n</code></pre> para convertir de texto a objeto se usa el metodo parse(): <pre><code>objeto = JSON.parse(texto);\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/modulos/","title":"Modulos","text":"","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/modulos/#crear-modulos","title":"Crear Modulos","text":"<p>Si deseamos crear modulos con constantes, funciones etc se crea un archivo con extension js que contenga todos los elementos que queremos reutilizar y al finalizar se los comparte con la instruccion exports, en forma de propiedades: <pre><code>exports.&lt;nombre_exterior&gt; = &lt;elemento_interno&gt;;\n</code></pre> Ejemplo: un m\u00f3dulo con una funci\u00f3n y una constante <pre><code>function Sumar(a,b){\n    return a + b;\n}\nlet PI=3.141592;\n// se ponen a disposici\u00f3n los elementos de este m\u00f3dulo\nexports.sumar = Sumar;  \nexports.pi = PI;\n</code></pre></p> <p>Otra forma de hacer lo mismo es crear una constante objeto vac\u00eda, asignarle los elementos como m\u00e9todos y luego exportar el objeto completo mediante 'module.exports'. Ejemplo: <pre><code>const Mat =  {}; //constante elemento vacia\nfunction sumar(a,b){\n    return a + b;\n}\nlet PI=3.141592;\n//asignaciones a la constante\nMat.sumar = sumar;\nMat.pi = PI;\n//exportacion\nmodule.exports = Mat\n</code></pre> Una variante m\u00e1s: exportar el objeto con los contenidos asignados dentro: <pre><code>//.....\nmodule.exports = {\n  sumar : sumar,\n  pi : pi\n};\n</code></pre> Para importar el m\u00f3dulo desde otro archivo se usa la instruccion require(): <pre><code>const &lt;descriptor&gt; = require('&lt;ruta_absoluta&gt;/&lt;nombre_archivo&gt;')\n</code></pre> Si se desea especificar la ruta relativa debe indicarse con punto y barra: <pre><code>const &lt;descriptor&gt; = require('./&lt;ruta_relativa&gt;/&lt;nombre_archivo&gt;')\n</code></pre></p> <p>Para poder usar esos elementos importados se los precede por el descriptor que se le asign\u00f3 al m\u00f3dulo: <pre><code>&lt;descriptor&gt;.&lt;nombre_exterior&gt;\n</code></pre> Ejemplo: si el m\u00f3dulo del ejemplo anterior tiene como nombre de archivo 'modulo.js' se lo puede usar as\u00ed: <pre><code>const mi_modulo = require('./modulo.js');\nconsole.log(\"suma: \",mi_modulo.sumar(3,4) );\nconsole.log(\"pi: \", mi_modulo.pi);\n</code></pre> Normalmente al descriptor se le pone el mismo nombre que al m\u00f3dulo para evitar confusiones. Tambi\u00e9n se puede usar al sintaxis desestructurada, dodne a cada elemento importado se le pone su nombre original directamente como descriptor. En el ejemplo previo: <pre><code>const {suma , pi } = require('./modulo.js');\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/modulos/#modulos-prearmados","title":"M\u00f3dulos prearmados","text":"<p>NodeJS trae un mont\u00f3n de m\u00f3dulos prearmados ('built-in') listos para usar. Su lista se consigue en la subsecci\u00f3n de la API : https://nodejs.org/dist/latest-v18.x/docs/api/ En la p\u00e1gina de cada m\u00f3dulo se encuentra la lista de contenidos, como imoportarlo y como usarlo. Por ejemplo, el m\u00f3dulo del sistema operativo (OS): https://nodejs.org/dist/latest-v18.x/docs/api/os.html se importa con la siguiente instrucci\u00f3n:</p> <pre><code>const os = require('node:os');\n</code></pre> <p>Algunos ejemplos de modulos comunes: - http - https - fs (file system) - os (operating system) - path - console - process</p> <p>El m\u00f3dulo 'console' es particularmente usado para imitar los mensajes de la consola integrada de los navegadores. Dispone de las funciones log(), warn(), error() ,todas ellas permiten escribir texto en pantalla. Para crear un reporte m\u00e1s espec\u00edfico de error se puede crear un objeto de error dentro: <pre><code>console.error(new Error(\"HABEMUS ERROR!\"));\n</code></pre></p> <p>El modulo 'process' da informacion de los procesos y permite alg\u00fan nivel de injerencia. Ejemplo: conocer leer los argumentos ('argv') al llamar a una rutina  console.log(process.argv); //la ruta de node es el elemento 0 //la ruta del programa es el argumento 1</p> <p>El m\u00f3dulo 'os' da informacion sobre el sistema operativo, propiedades del usuario actual, etc.</p> <p>El modulo 'timers' permite introducir temporizaci\u00f3n. PRincipales funciones: - setTimeout() : impone un retardo en milisegundos antes de ejecutar una funci\u00f3n. Uso:   <pre><code>setTimeout(funcion, retraso,argumento1,argumento2,...);\n</code></pre> - setInmediate() : ejecuta una funci\u00f3n de forma asincr\u00f3nica justo despu\u00e9s de finalizar la rutina s\u00edncrona actual. Uso:   <pre><code>setInmediate(funcion,argumento1,argumento2,...);\n</code></pre> - setInterval() : ejecuta una rutina infinitas veces con un intervalo de tiempo en milisegundos entre ejecuciones. Uso:   <pre><code>  setInterval(funcion, intervalo , argumento1, .... )\n</code></pre></p> <p>El m\u00f3dulo 'fs' accede a las funciones del sistema de archivos: leer, modificar, copiar, eliminar ,cambiar nombre. Todos los metodos de este m\u00f3dulo son as\u00edncronos por defecto. Para volverlos sincr\u00f3nicos se a\u00f1ade 'Sync' al final de sus nombres. Ejemplo: <pre><code>fs.rename() //renombreado (asincrono)\nfs.renameSync() //renombrado sincrono\n</code></pre> Ejemplo: lectura de archivo HTML en el directorio. <pre><code>const fs = require('fs');\nfs.readFile('index.html','utf-8',(err,contenido) =&gt;{\n    if(err){\n        throw err;\n    }\n    console.log(contenido);\n});\n</code></pre> Ejemplo: renombrado de 'index.html' a 'main.html'; <pre><code>const fs = require('fs');\nvar origen = 'index.html'\nvar destino = 'main.html'\nfs.rename(origen,destino, (err) =&gt;{\n  if (err){\n  throw err;\n  }\n  console.log('Nombre cambiado exitosamente');\n});\n\n//Creaci\u00f3n / reescritura de archivo\nfs.writeFile(archivo,contenido, (err) =&gt;{\n  if (err){\n  throw err;\n  }\n  console.log('Creaci\u00f3n / reescritura exitosa');\n});\n\n//a\u00f1adir contenido al final de un archivo\nfs.appendFile(archivo,contenido, (err) =&gt;{\n    if (err){\n    throw err;\n    }\n    console.log('A\u00f1adido exitoso');\n});\n\n//eliminar archivo\nfs.unlink(archivo, (err) =&gt;{\n    if (err){\n    throw err;\n    }\n    console.log('Archivo eliminado);\n});\n</code></pre></p>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"node/npm/","title":"Node Package Management (NPM)","text":"<p>P\u00e1gina oficial: npmjs.com</p> <p>Los paquetes NPM se instalan desde la terminal as\u00ed: <pre><code>npm install &lt;nombre_paquete&gt;\n</code></pre> Para definir tambi\u00e9n el n\u00famero de versi\u00f3n se usa el arroba: <pre><code>npm install &lt;nombre_paquete&gt;@&lt;numero_version&gt;\n</code></pre> para instalar un paquete como dependencia de desarrollo: <pre><code>npm install &lt;paquete&gt; --save-dev\n</code></pre> Para desinstalar un paquete existente se usa el comando uninstall: <pre><code>npm uninstall &lt;nombre_paquete&gt;\n</code></pre> Los paquetes se instalan en el directorio de trabajo. Para cargar usar los paquetes en el proyecto hay que importarlos: <pre><code>const &lt;descriptor&gt; = require(&lt;nombre_paquete&gt;)\n</code></pre></p> <p>Para crear un archivo con toda la informacion de un proyecto (nombre,version,rutina principal, dependencias, etc) se usa el comando init: <pre><code>npm init\n</code></pre> En consola empiezan a requerirse al usuario los nombres del paquete, numero de versi\u00f3n, etc. Al terminar se crea el archivo package.json con toda la informacion dada. Si en cambio se desea crear el archivo con todos sus valores predeterminado la instruccion para ello es: <pre><code>npm init --yes\n</code></pre> El archivo JSON creado servir\u00e1 para la instalacion en el servidor definitivo con el comando install: <pre><code>npm install\n</code></pre> y para ejecutar se usa el comando start: <pre><code>npm start\n</code></pre> Prestar atencion dentro del archivo package.json a la seccion script:   <pre><code>\"scripts\": {\n  \"start\": \"node &lt;principal&gt;.js\"\n},\n</code></pre> Pueden a\u00f1adirse m\u00e1s comandos al paquete con nombres alternativos. Por ejemplo, creamos un comando adicional llamado 'develop' en el JSON:   <pre><code>\"scripts\": {\n  \"start\": \"node &lt;principal&gt;.js\",\n  \"develop\": \"node &lt;auxiliar&gt;.js\"\n},\n</code></pre> y para poder ejecutarlo es necesario usar el comando RUN: <pre><code>npm run develop\n</code></pre> En cambio la rutina principal se sigue ejecutando directamente con START: <pre><code>npm start \n</code></pre> el archivo 'package-lock.json' describe el arbol generado y las guarda para futuras instalaciones.</p> <p>Nodemon</p> <p>Nodemon permite reiniciar la ejecuci\u00f3n de Node con los cambios de los programas creados.</p> <p>Para instalarlo globalmente:</p> <pre><code>npm install -g nodemon\n</code></pre> <p>Para usarlo se llama a Nodemon en vez de a Node:</p> <pre><code>nodemon &lt;programa&gt;.js\n</code></pre>","tags":["JavaScript","NodeJS","NPM","PNPM"]},{"location":"ts/clases/","title":"Clases","text":"","tags":["TypeScript"]},{"location":"ts/clases/#definicion","title":"Definici\u00f3n","text":"<p>De las clases se tipean tanto los atributos como los constructores: <pre><code>class Persona{\n    nombre: string;\n    constructor(nombre: string){\n        this.nombre = nombre;\n    }\n    saludar(){\n        console.log('Hola, mi nombre es ${this.nombre}.')\n    }\n}\n</code></pre> Nota al pie: 'atributos' son las variables internas de la clasa, las cuales ser\u00e1n afectadas por los m\u00e9todos; en tanto que los 'constructores' son las variables auxiliares que se usan para inicializar la instancia (es decir la estructura de datos con la forma y m\u00e9todos de la clase)</p>","tags":["TypeScript"]},{"location":"ts/clases/#encapsulamiento-y-genericos","title":"Encapsulamiento y gen\u00e9ricos","text":"<p>El encapsulamiento consiste en hacer privados a los atributos de las clases y acceder a ellos \u00fanicamente mediante los m\u00e9todos dedicados para ello, llamados gen\u00e9ricamente 'getters' (lectura: get) y 'setters' (escritura: set)</p> <pre><code>// T es un gen\u00e9rico\nclass Sorteo&lt;T&gt;{\n\n    private ticket?: T;\n\n    constructor(\n        private nombre: string\n        ){ }  \n\n    setTicket(ticket: T){\n        this.ticket = ticket;\n    }\n\n    getTicket(){\n        return this.ticket\n    }\n\n    public sortear(): string {\n        return `Para ${this.nombre} el ticket es ${this.ticket}`\n    }\n}\n</code></pre> <p>En ejemplo se usa un gen\u00e9rico como argumento entre \\&lt;&gt;. Este argumento se tipea reci\u00e9n al crear las instancias de la clase, es decir al darle uso.  En el ejemplo siguiente: tickets T num\u00e9ricos <pre><code>// Ticket num\u00e9rico y nombre de beneficiario\nlet sorteo = new Sorteo&lt; number &gt;(\"Manolo\")\n//Asignacion de valor\nsorteo.setTicket(7)\nconsole.log(sorteo.sortear())\n</code></pre> El ticket tambi\u00e9n podr\u00eda ser un texto, por ejemplo un alfanum\u00e9rico. En tal caso al gen\u00e9rico se lo tipea como string: </p> <pre><code>let sorteo = new Sorteo&lt; string &gt;(\"Paco\")\nsorteo.setTicket(\"S3\")\nconsole.log(sorteo.sortear())\n</code></pre>","tags":["TypeScript"]},{"location":"ts/compuestos/","title":"Datos compuestos","text":"","tags":["TypeScript"]},{"location":"ts/compuestos/#objetos","title":"Objetos","text":"<p>Los objetos no se tipean directamente sino a traves de una 'interface' (ver m\u00e1s adelante).</p>","tags":["TypeScript"]},{"location":"ts/compuestos/#arrays","title":"Arrays","text":"<p>Los arrays con \u00fanico tipo de datos internos se tipean con la palabra reservada del tipo de datos y dos corchetes([]). Ejemplo: arreglo de textos</p> <pre><code>const nombres: string[] = [\"Juan\",\"Maria\", \"Pedro\"]\n</code></pre>","tags":["TypeScript"]},{"location":"ts/compuestos/#enum","title":"Enum","text":"<p>Las enumeraciones ro requieren tipado a\u00f1adido</p> <pre><code>enum DiaSemana{\n    Lunes,\n    Martes,\n    Miercoles,\n    Jueves,\n    Viernes,\n    Sabado,\n    Domingo,\n}\n\nenum Colores{\n    Rojo=\"rojo\",\n    Verde=\"verde\",\n    Azul=\"azul\",\n}\n</code></pre>","tags":["TypeScript"]},{"location":"ts/ejecutar/","title":"Ejecutar","text":"","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/ejecutar/#compilacion","title":"Compilacion","text":"","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/ejecutar/#extension-y-compilacion","title":"Extensi\u00f3n y compilacion","text":"<p>Los programas de TypesCript se guardan con la extension .ts. </p> <p>La compilacion del c\u00f3digo TS se hace con el comando tsc: <pre><code>tsc &lt;nombre_rutina&gt;.ts\n</code></pre> Esto crea un archivo JS con el mismo nombre de archivo y la rutina adaptada a JavaScript.</p>","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/ejecutar/#interpretado","title":"Interpretado","text":"<p>En cambio, para interpretar directamente el c\u00f3digo se usa el comando ts-node: <pre><code>ts-node &lt;nombre_rutina&gt;.ts\n</code></pre></p>","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/ejecutar/#modo-observador","title":"Modo observador","text":"<p>El modo observador se usa a\u00f1adiendo la opcion -w (watch) a la compilaci\u00f3n <pre><code>tsc &lt;nombre_rutina&gt;.ts -w\n</code></pre> Esto permite ver los cambios sobre la rutina JS casi en tiempo real. Muy \u00fatil para desarrolladores web.</p>","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/ejecutar/#inicializar-proyectos","title":"Inicializar proyectos","text":"<p>Para trabajar con m\u00faltiples archivos TS y tambi\u00e9n para decidir opciones de compilaci\u00f3n es mejor inicializar un proyecto dentro del directorio de trabajo: <pre><code>tsc -init\n</code></pre> Esto crea un archivo tsconfig.json con las opciones de compilacion prearmadas. Una vez realizado este paso se puede usar el modo observador sobre TODOS los archivos con el comando:</p> <pre><code>tsc -w\n</code></pre>","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/ejecutar/#proyectos-con-react","title":"Proyectos con React","text":"<p>ReactJS puede usarse con TS.  Mediante Vite se puede crear un proyecto con la opci\u00f3n 'TypeScript+ SWC', se instalan los paquetes necesarios localmente (<code>npm install</code>) y el resultado es un proyecto cuyo c\u00f3digo de componentes se guarda en archivos con extensi\u00f3n .tsx en vez de .jsx.</p> <p>Al finalizar el trabajo se construye el proyecto con <code>npm run build</code>.</p>","tags":["JavaScript","TypeScript","TSNode"]},{"location":"ts/funciones/","title":"Funciones","text":"","tags":["TypeScript"]},{"location":"ts/funciones/#funciones","title":"Funciones","text":"<p>En las funciones hay que tipar tanto los datos de entrada (argumentos) como los datos de salida (valor de retorno).</p> <pre><code>function sumar(a: number,b: number): number{\n    return a+b;\n}\n</code></pre> <p>Las funciones flecha pueden tener retorno implicito (inferido por TS):</p> <pre><code>const dividir = (a: number,b:number) =&gt; a / b;\n</code></pre> <p>Typescript permite usar argumentos opcionales marcados con '?':</p> <p><pre><code>function saludar(nombre?: string): string {\n    if (nombre!==undefined){\n        return `Hola ${nombre}`\n    } else{\n        return \"Hola Noname\"\n    }\n}\n</code></pre> y valores de defecto asignados tras el tipeo:</p> <pre><code>const dividir = (a: number,b: number = 1) =&gt; a / b;\n</code></pre>","tags":["TypeScript"]},{"location":"ts/interfases/","title":"Interfases","text":"<p>Interfaz basica: <pre><code>interface Persona{\n    nombre: string;\n    edad:   number;\n}\n</code></pre> Interfaz con propiedades opcionales:</p> <p><pre><code>interface Producto {\n    nombre: string;\n    precio: number;\n    descripcion?: string; \n}\n</code></pre> Interfaz para funciones:</p> <pre><code>interface comparador{\n    (a: number, b: number): boolean;\n}\n</code></pre> <p>Interfaz para clases:</p> <pre><code>interface Persona {\n    nombre: string;\n    edad:   number;\n    saludar(): void;\n}\n</code></pre>","tags":["TypeScript"]},{"location":"ts/intro-ts/","title":"TypeScript","text":"<p>SergieCode - TYPESCRIPT desde cero</p> <p>MoureDev - TypeScript desde Cero: primeros pasos</p> <p>Sitio oficial: https://www.typescriptlang.org</p> <p>TS es un superconjunto de JavaScript creado por Microsoft en 2012 para usar JavaScript compilado.</p> <p>TS a\u00f1ade tipado fuerte a JS, por lo dem\u00e1s es casi igual. El compilador de TS ayuda a detectar errores de sintaxis sin necesidad de ejecutar todas las partes del programa  y las convierte a JavaScript. Ventajas:</p> <ul> <li>Prevencion de errores por tipos de datos erroneos</li> <li>Facilidad de desarrollo: el interprete propone m\u00e9todos y acordes a los tipos de datos elegidos</li> </ul>","tags":["JavaScript","ReactJS","NodeJS","NPM","PNPM","TSNode"]},{"location":"ts/primitivos/","title":"Datos primitivos","text":"","tags":["TypeScript"]},{"location":"ts/primitivos/#number","title":"Number","text":"<p>Los numeros se tipean indicando el nombre de variable, dos puntos (:) y la palabra 'number'. Algunos ejemplos: variables num\u00e9ricas inicializada con el numero 10 en distintos formatos numericos. <pre><code>const num1: number = 10; //decimal  \nconst num2: number = 1e1; //decimal ,notacion cientifica \nconst num3: number = 0xA; //hexadecimal\nconst num4: number = 0o12; //octal\nconst num5: number = 0b1010; //binario  \n</code></pre></p>","tags":["TypeScript"]},{"location":"ts/primitivos/#string","title":"String","text":"<p>Las variables de texto usan la palabra reservada 'string' <pre><code>const texto1: string = \"Hola\";\nconst texto2: string = 'mundo';\n\nconst n: number = 14;\nconst texto3: string =`Edad: ${n}`;  \n</code></pre></p>","tags":["TypeScript"]},{"location":"ts/primitivos/#boolean","title":"Boolean","text":"<p>Las variables l\u00f3gicos (booleanos) se tipean co nal palabra reservada 'boolean': <pre><code>const logica1: boolean = true\nconst logica2: boolean = false\n</code></pre></p>","tags":["TypeScript"]},{"location":"ts/primitivos/#undefined","title":"Undefined","text":"<pre><code>let indefinido: undefined;\nindefinido = undefined\n</code></pre>","tags":["TypeScript"]},{"location":"ts/primitivos/#null","title":"NULL","text":"<pre><code>let variable_null: null;\nvariable_null = null;\n</code></pre>","tags":["TypeScript"]},{"location":"ts/tipado/","title":"Tipado de datos","text":"<p>TS asigna un tipo de datos a cada variable autom\u00e1ticamente al asignarle un valor. Este tipo de datos no puede ser alterado a posteriori. Por ejemplo, si una variable al ser creada se le asign\u00f3 una cadena de texto esta se puede cambiar; sin embargo TS no permitir\u00e1 guardar en la variable un numero entero, un flotante o cualquier otra cosa que no sea una cadena de caracteres.</p> <p>Las variables se pueden tipar explicitamente mediante interfases con el operador : . Por ejemplo, para una cadena de caracteres:</p> <pre><code>var texto : String = \"mi texto\";    //interfaz \"String\"\n</code></pre> <p>En el ejemplo 'String' es una interfase en tanto que 'string' es un dato primitivo.</p>","tags":["TypeScript"]},{"location":"ts/tipado/#tipos-de-datos","title":"Tipos de datos","text":"<ul> <li>Primitivos</li> <li>string</li> <li>number</li> <li>boolean</li> <li>undefined</li> <li>null</li> <li>void (vac\u00edo)</li> <li>any (s\u00f3lo para pruebas)</li> <li>Compuestos (estructurados)</li> <li>object</li> <li>array</li> <li>enum</li> <li>function </li> <li>Definidos por el usuario</li> <li>clase</li> <li>interface</li> <li>type</li> </ul>","tags":["TypeScript"]},{"location":"ts/tipos/","title":"Tipos","text":"","tags":["TypeScript"]},{"location":"ts/tipos/#types","title":"Types","text":"<p>Se pueden crear tipos de datos personalizados usando la palabra reservada 'type'</p> <p>B\u00e1sico:</p> <pre><code>type Numero = number;\n</code></pre> <p>Objeto literal:</p> <p><pre><code>type Personal = {\n    nombre: string;\n    edad: number;\n}\n</code></pre> Union de tipos:</p> <pre><code>type Nombre = string | null;\n</code></pre> <p>Propiedades opcionales:</p> <pre><code>type Producto = {\n    nombre: string;\n    precio: number;\n    descripcion?: string;\n}\n</code></pre> <p>Tipos par funciones:</p> <pre><code>type Comparador1 = {\n    (a: number, b: number): boolean;\n}\n</code></pre> <p>Tipos para clases:</p> <pre><code>type Persona2 = {\n    nombre: string;\n    edad:   number;\n    saludar(): void;\n}\n</code></pre>","tags":["TypeScript"]},{"location":"ts/tsnode/","title":"TS Node","text":"<p>Icono: </p>","tags":["TypeScript","NodeJS","NPM","TSNode"]},{"location":"ts/tsnode/#instalaciones","title":"Instalaciones","text":"<p>Instalar NodeJS y luego instalar por terminal Typescript (normalmente se hace en modo global)</p> <pre><code>npm install -g typescript   \n</code></pre> <p>Para instalar TS-Node (entorno de ejecucion adaptado a TypeScript, similar a NodeJS)</p> <pre><code>npm install -g ts-node\n</code></pre> <p>Para verificar las versiones disponibles:</p> <pre><code>tsc --version\nts-node --version\n</code></pre> <p>Sitio de TS Node: https://typestrong.org/ts-node/docs/</p>","tags":["TypeScript","NodeJS","NPM","TSNode"]}]}